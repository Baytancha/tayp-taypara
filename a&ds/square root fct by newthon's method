package main
import (
	"fmt"
)

type ErrNegativeSqrt float64

func (e ErrNegativeSqrt) Error() string {
      val := float64(e)
     return fmt.Sprintf("Error: %v is a negative value",
		val)
}

func Sqrt(x float64) (float64, error) {
	if (x == 0) {return 0.0, nil} //special case for 0
    if (x < 0) { 
	return 0, ErrNegativeSqrt(x)
	}
	var z float64 = 1.0
	z1 := z + 0.1 //this to enter the loop
	var first = true
	for z < z1 {      //as long as values are decreasing
		z1 = z
		z -= (z*z - x) / (2 * z)	
		if first {     //this ugliness to pass the first loop
		z1 = z + 0.1
		first = false}
	}
	return z, nil
}

func main() {

   for i:= 0.0; i<100; i++ {
   val, err := Sqrt(i);
    if err != nil {
	fmt.Println(err)
	} else {fmt.Println(val) }
	
	}

 }
