template<typename T>
struct X
{
    void baz(T&& c);  //This is an r-value ref
};


template<typename T>
void bar(T&& b);

int main()
try {
    int i = 42;

    bar(42);
    bar(i);

    bar<int>(42);
    bar<int&>(i);






The default rule for type deduction is that reference types can never be the result of deduction:

https://stackoverflow.com/questions/46560123/understanding-type-deduction-for-universal-references


////

TYPE OF AN ENTITY VS TYPE AND VALUE CATEGORY OF AN EXPRESSION

int z = 10;
	decltype(auto) zz = z; 
	decltype(auto) zzz = (z);
	
	z = 20;

	std::cout << zz << "\n";

	std::cout << zzz;









 Otherwise, if e is any other expression, decltype(e) produces a type that reflects the type and
value category of that expression as follows:
– If e is an lvalue of type T, decltype(e) produces T&.
– If e is an xvalue of type T, decltype(e) produces T&&.
– If e is a prvalue of type T, decltype(e) produces T.

decltype can also be useful when the value-producing auto deduction is not sufficient. For
example, assume we have a variable pos of some unknown iterator type, and we want to create a
variable element that refers to the element stored by pos. We could use
auto element = *pos;
However, this will always make a copy of the element. If we instead try
auto& element = *pos;
then we will always receive a reference to the element, but the program will fail if the iterator’s
operator* returns a value.12 To address this problem, we can use decltype so that the value- or
reference-ness of the iterator’s operator* is preserved:
decltype(*pos) element = *pos;




int x;
decltype(auto) z = x; // object of type int
decltype(auto) r = (x); // reference of type int&









void g (std::string&& s)
{
// check the type of s:
std::is_lvalue_reference<decltype(s)>::value; // false
std::is_rvalue_reference<decltype(s)>::value; // true (s as declared)
std::is_same<decltype(s),std::string&>::value; // false
std::is_same<decltype(s),std::string&&>::value; // true
// check the value category of s used as expression:
std::is_lvalue_reference<decltype((s))>::value; // true (s is an lvalue)
std::is_rvalue_reference<decltype((s))>::value; // false
std::is_same<decltype((s)),std::string&>::value; // true (T& signals an lvalue)
std::is_same<decltype((s)),std::string&&>::value; // false
}


int i = 42; // i has type int
int const& ref = i; // ref has type int const& and refers to i
auto x = ref; // x1 has type int and is a new independent object
decltype(auto) y = ref; // y has type int const& and also refers to i
The type of y is obtained by applying decltype to the initializer expression, here ref, which is int
const&. In contrast, the rules for auto type deduction produce type int



Since C++17, decltype(auto) can also be used for deducible nontype parameters (see
Section 15.10.1 on page 296). The following example illustrates this:
template<decltype(auto) Val> class S
{
...
};
constexpr int c = 42;
extern int v = 42;
S<c> sc; // #1 produces S<42>
S<(v)> sv; // #2 produces S<(int&)v>







decltype(auto) foo()
{
	int m = 1;
	return (m);
}

int& fool()
{
	int m = 1;
	return m;
}

int main()
try {

	decltype(auto) x = foo();
	
	int& x1 = fool();

	std::cout << x1;

	std::cout << std::is_lvalue_reference<decltype(x)>::value; // false
	std::cout << std::is_rvalue_reference<decltype(x)>::value; // true (s as declared)
	std::cout << std::is_same<decltype(x), int&>::value; // false
	std::cout << std::is_same<decltype(x), int&&>::value; // true
	std::cout << "\n";
	std::cout << std::is_lvalue_reference<decltype((x))>::value; // true (s is an lvalue)
	std::cout << std::is_rvalue_reference<decltype((x))>::value; // false
	std::cout << std::is_same<decltype((x)), int&>::value; // true (T& signals an lvalue)
	std::cout << std::is_same<decltype((x)), int&&>::value; // false





CTAD TYPE DEDUCTION FUNNY CASES
#include <cstddef>
#include <cstring>
#include <iostream>
#include <string>
#include <string_view>

template<std::size_t N>
struct String
{
    char carr[N] {};

    String(const char * cstr)
    {
        std::memcpy(carr, cstr, N);
    }

    String(const std::string_view & sv)
    {
        std::memcpy(carr, sv.data(), N);
    }

    constexpr std::size_t size() const
    {
        return N;
    }
};

// user-defined class template argument deduction guide for string literal
template<std::size_t N> String(const char (&)[N]) -> String<N-1>;

int main()
{
    String s1("hello");
    static_assert(s1.size() == 5);

    constexpr std::string_view sv("view");
    String<4> s2(sv);
    static_assert(s2.size() == 4);

    // Question: How to write class template argument deduction guide
    //           so that the following lines would compile?
    // String s3(sv);
    // static_assert(s3.size() == 4);

    return 0;
}

You need guides when the deduction of the type from the arguments is not based on the type of one of those arguments. 
Initializing a vector from an initializer_list explicitly uses the vector's T, so it doesn't need a guide.

The left side doesn't necessarily specify an actual constructor. The way it works is that, 
if you use template constructor deduction on a type, it matches the arguments you pass against all deduction guides (actual constructors of the primary template provide implicit guides). If there is a match, it uses that to determine which template arguments to provide to the type.

But once that deduction is done, once the compiler figures out the template parameters for the type, 
initialization for the object of that type proceeds as if none of that happened. That is, the deduction 
guide selected does not have to match the constructor selected.

This also means that you can use guides with aggregates and aggregate initialization:

template<typename T>
struct Thingy
{
  T t;
};

Thingy(const char *) -> Thingy<std::string>;

Thingy thing{"A String"}; //thing.t is a `std::string`.
So deduction guides are only used to figure out the type being initialized. 
The actual process of initialization works exactly as it did before, 
once that determination has been made.







