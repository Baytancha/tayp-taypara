int f() {
  return 123;
}
// vs.
auto f() -> int {
  return 123;
}
auto g = []() -> int {
  return 123;
};

// NOTE: This does not compile!
template <typename T, typename U>
decltype(a + b) add(T a, U b) {
    return a + b;
}

// Trailing return types allows this:
template <typename T, typename U>
auto add(T a, U b) -> decltype(a + b) {
    return a + b;
}

It's called "trailing return type" (google it) and allows you to postpone saying what the actual type is until after you are done with your args etc.

There many reasons to do that:

Your return type is in the right scope.

Consider:

template<typename T, size_t kIndexSize>
MyContainer<T, kIndexSize>::const_iterator MyContainer<T, kIndexSize>::find(const T& x) const noexcept { ... }
Compare with:

template<typename T, size_t kIndexSize>
auto MyContainer<T, kIndexSize>::find(const T& x) const noexcept -> const_iterator { ... }

Note that now you don't have to say that you are talking about MyContainer<T, kIndexSize>::const_iterator, because already specified 
that you are implementing a method of MyContainer<T, kIndexSize>.

Your return type can depend on arguments. An example from cppreference: template<class T, class U> auto add(T t, U u) -> decltype(t + u);

Method names are nicely aligned. The return type information is often both ultra-verbose and irrelevant. Moving it to the right allows 
you to keep the interfaces clean. I wrote an example in this thread here. The name of the function is by far the most important part 
of the function for the reader, and now it's not shifted by an arbitrarily long return type.

Most of the newer languages (rust, swift, go, zig, typescript, etc.) are generally using trailing return types. 
I'm happy that we finally got here too.


Converting constructors will convert values of braced list syntax into constructor arguments.

struct A {
  A(int) {}
  A(int, int) {}
  A(int, int, int) {}
};

A a {0, 0}; // calls A::A(int, int)
A b(0, 0); // calls A::A(int, int)
A c = {0, 0}; // calls A::A(int, int)
A d {0, 0, 0}; // calls A::A(int, int, int)




It’s not always easy to find out and formulate the right expression to SFINAE out function templates
for certain conditions.
Suppose, for example, that we want to ensure that the function template len() is ignored for
arguments of a type that has a size_type member but not a size() member function. Without
any form of requirements for a size() member function in the function declaration, the function
template is selected and its ultimate instantiation then results in an error:
template<typename T>
typename T::size_type len (T const& t)
{
return t.size();
}
std::allocator<int> x;
std::cout << len(x) << ’\n’; // ERROR: len() selected, but x has no size()
There is a common pattern or idiom to deal with such a situation:
• Specify the return type with the trailing return type syntax (use auto at the front and -> before
the return type at the end).
• Define the return type using decltype and the comma operator.
• Formulate all expressions that must be valid at the beginning of the comma operator
(converted to void in case the comma operator is overloaded).
• Define an object of the real return type at the end of the comma operator.
For example:
template<typename T>
auto len (T const& t) -> decltype( (void)(t.size()), T::size_type() )
{
return t.size();
}
Here the return type is given by
decltype( (void)(t.size)(), T::size_type() )












