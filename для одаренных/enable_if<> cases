struct M {


    virtual ~M();
};

struct M1 : M {



};



template<typename T, template<typename, typename> class Cont>
void foo() { std::cout<<"instantiated\n"; }


template<typename T, typename Cont>
void foo() { std::cout << "instantiated2\n"; }


template<typename T, typename = std::enable_if_t<(std::is_polymorphic_v<T>)>>
void foo2() { std::cout << "enabled\n"; }


template<typename T, typename = std::enable_if_t<(std::is_arithmetic_v<T>)>>
T foo3(T arg) { return arg; }


template<typename T,typename C, typename = std::enable_if_t<(std::is_object_v<T>)>, 
                                typename = std::enable_if_t < (std::is_object_v<C>)> >
void foo4(T arg1, C arg2) { std::cout << arg1 << " " << arg2 << "\n"; }


int main()
try {

    foo<int, std::vector>();

    foo<int, double>();


    //foo2<std::vector>();

    foo2<M>();
    double x = 100;

    foo3(x);

    foo4("enabled", "or not");















Uses of enable_if
enable_if is an extremely useful tool. There are hundreds of references to it in the C++11 standard template library. It's so useful because it's a key part in using type traits, a way to restrict templates to types that have certain properties. Without enable_if, templates are a rather blunt "catch-all" tool. If we define a function with a template argument, this function will be invoked on all possible types. Type traits and enable_if let us create different functions that act on different kinds of types, while still remaining generic [3].

One usage example I like is the two-argument constructor of std::vector:

// Create the vector {8, 8, 8, 8}
std::vector<int> v1(4, 8);

// Create another vector {8, 8, 8, 8}
std::vector<int> v2(std::begin(v1), std::end(v1));

// Create the vector {1, 2, 3, 4}
int arr[] = {1, 2, 3, 4, 5, 6, 7};
std::vector<int> v3(arr, arr + 4);
There are two forms of the two-argument constructor used here. Ignoring allocators, this is how these constructors could be declared:

template <typename T>
class vector {
    vector(size_type n, const T val);

    template <class InputIterator>
    vector(InputIterator first, InputIterator last);

    ...
}
Both constructors take two arguments, but the second one has the catch-all property of templates. 
Even though the template argument InputIterator has a descriptive name, it has no semantic meaning - 
the compiler wouldn't mind if it was called ARG42 or T. The problem here is that even for v1, the second 
constructor would be invoked if we didn't do something special. This is because the type of 4 is int rather 
than size_t. So to invoke the first constructor, the compiler would have to perform a type conversion. 
The second constructor would fit perfectly though.

So how does the library implementor avoid this problem and make sure that the second constructor is 
only called for iterators? By now we know the answer - with enable_if.

Here is how the second constructor is really defined:

template <class _InputIterator>
vector(_InputIterator __first,
       typename enable_if<__is_input_iterator<_InputIterator>::value &&
                          !__is_forward_iterator<_InputIterator>::value &&
                          ... more conditions ...
                          _InputIterator>::type __last);
It uses enable_if to only enable this overload for types that are input iterators, though not forward iterators. 
For forward iterators, there's a separate overload, because the constructors for these can be implemented more 
efficiently.

As I mentioned, there are many uses of enable_if in the C++11 standard library. The string::append method 
has a very similar use to the above, since it has several overloads that take two arguments and a template 
overload for iterators.

A somewhat different example is std::signbit, which is supposed to be defined for all arithmetic types 
(integer or floating point). Here's a simplified version of its declaration in the cmath header:

template <class T>
typename std::enable_if<std::is_arithmetic<T>, bool>::type
signbit(T x)
{
    // implementation
}

Without using enable_if, think about the options the library implementors would have. 
One would be to overload the function for each of the known arithmetic type. That's very verbose. 
Another would be to just use an unrestricted template. But then, had we actually passed a wrong type 
into it, say std::string, we'd most likely get a fairly obscure error at the point of use. With enable_if, 
we neither have to write boilerplate, nor to produce bad error messages. If we invoke std::signbit as defined 
above with a bad type we'll get a fairly helpful error saying that a suitable function cannot be found.
















