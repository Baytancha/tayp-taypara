https://dev.to/pratikparvati/function-object-aka-functors-in-c-456j

ostream& operator<<(ostream& os, const Book& d)
{
    return os << "title: " << d.title_get() <<"\n"
        << "author: " << d.author_get() << "\n"
        << "ISBN: " << d.ISBN_get() << "\n"
        << "copyright date: " << d.copyright_get() << "\n"
        << "genre: " << genre_name(d) << "\n";
}

constexpr bool operator==(const Fraction& lhs, const Fraction& rhs)
{
    return lhs.num() == rhs.num() && lhs.den() == rhs.den();
}
 
constexpr bool operator!=(const Fraction& lhs, const Fraction& rhs)
{
    return !(lhs == rhs);
}



class Task {
public:
    void operator()(int x) {
        for (int i = 0; i < x; i++)
            std::cout << "Thread using function object as callable\n";
    }
};

int main() {
    std::thread t1(Task(), 3);
    t1.join();
    return 0;
}


double& operator[ ](int n) { return elem[n]; } // access
    const double& operator[ ](int n) const { return elem[n]; }




class Foo {
public:
    operator void* () {
         return ptr;
    }

private:
    void *ptr;
};


No they are two different operators. The operator void* function is a type casting function, while operator() is a function call operator.

The first is used when you want to convert an instance of Foo to a void*, like e.g.

Foo foo;
void* ptr = foo;  // The compiler will call `operator void*` here
The second is used as a function:

Foo foo;
void* ptr = foo();  // The compiler calls `operator()` here





























    
