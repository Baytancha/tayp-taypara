Iterators are used to connect our code (algorithms) to our data. The writer 
of the code knows about the iterators (and not about the details of how the iterators actually get to the data), and the data provider supplies iterators rather than 
exposing details about how the data is stored to all users. The result is pleasingly 
simple and offers an important degree of independence between algorithms and 
containers. To quote Alex Stepanov: “The reason STL algorithms and containers 
work so well together is that they don’t know anything about each other.” Instead, 
both understand about sequences defined by pairs of iterators.


In other words, my algorithms no longer have to know about the bewildering 
variety of ways of storing and accessing data; they just have to know about iterators. Conversely, if I’m a data provider, I no longer have to write code to serve a 
bewildering variety of users; I just have to implement an iterator for my data. At 
the most basic level, an iterator is defined by just the *, ++, ==, and != operators. 
That makes them simple and fast.








#include <string>
#include <iostream>
#include <memory>
#include <stdexcept>
#include <vector>
#include <cmath>
#include <algorithm>
#include <list>
#include <array>
#include <random>

using namespace std;

template<class Elem> struct Link {
    Link* prev;    // previous link
    Link* succ;    // successor (next) link
    Elem  val;     // the value
    Link(const Elem& v = Elem(), Link* p = 0, Link* s = 0) : val(v), prev(p), succ(s) {}
};

//------------------------------------------------------------------------------

template<class Elem> class list2 {
    // representation and implementation details
public:
    class iterator;     // member type: iterator

	list2() : first(new Link<Elem>()), last(first) {} // we must initialize first and last to check for empty list in case no elements are pushed

    iterator begin();   // iterator to first element
    iterator end();     // iterator to one beyond last element

    iterator insert(iterator p, const Elem& v); // insert v into list after p
    iterator erase(iterator p);                 // remove p from the list

    void push_back(const Elem& v);  // insert v at end
    void push_front(const Elem& v); // insert v at front
    void pop_front();   // remove the first element
    void pop_back();    // remove the last element

    Elem& front();      // the first element
    Elem& back();       // the last element

    Link<Elem>* first;
    Link<Elem>* last;   // one-beyond-the-last link
};

//------------------------------------------------------------------------------

template<class Elem> 
class list2<Elem>::iterator {
    Link<Elem>* curr;   // current node
public:
    iterator(Link<Elem>* p) :curr(p) { } // CONSTRUCTOR: begin and end return a wrapper for the ptr
    iterator& operator++() { curr = curr->succ; return *this; } // forward
    iterator& operator--() { curr = curr->prev; return *this; } // backwards
    Elem& operator*() { return curr->val; } // get value (dereference)

    friend bool operator==(const iterator& a, const iterator& b)
    {
        return a.curr == b.curr;
    }

    friend bool operator!=(const iterator& a, const iterator& b)
    {
        return a.curr != b.curr;
    }
};

//------------------------------------------------------------------------------

template<class Elem>
typename list2<Elem>::iterator list2<Elem>::begin()  // iterator to first element
{
    return iterator(first);
}

//------------------------------------------------------------------------------

template<class Elem>
typename list2<Elem>::iterator list2<Elem>::end() // iterator to one beyond last element
{
    return iterator(last);
}

//------------------------------------------------------------------------------

template<class Elem>
void list2<Elem>::push_front(const Elem& v) // insert v at front
{
    first = new Link<Elem>(v, 0, first);
}

//------------------------------------------------------------------------------
template<class Elem>
typename list2<Elem>::iterator list2<Elem>::insert(iterator p, const Elem& v) // insert v at front
{
    first = new Link<Elem>(v, 0, first);
}

//------------------------------------------------------------------------------
template<class Elem>
typename list2<Elem>::iterator list2<Elem>::erase(iterator p) // insert v at front
{
    first = new Link<Elem>(v, 0, first);
}

//------------------------------------------------------------------------------

template<class Iterator >
Iterator high(Iterator first, Iterator last)
// return an iterator to the element in [first,last) that has the highest value
{
    Iterator high = first;
    for (Iterator p = first; p != last; ++p)
        if (*high < *p) high = p;
    return high;
}

//------------------------------------------------------------------------------

void f()
{
    list2<int> lst;
    int x;
    while (cin >> x) lst.push_front(x);

    list2<int>::iterator q = high(lst.begin(), lst.end());
    cout << "the highest value was " << *q << endl;

    list2<int>::iterator p = high(lst.begin(), lst.end());
    if (p == lst.end())    // did we reach the end?
        cout << "The list is empty";
    else
        cout << "the highest value is " << *p << endl;
}


template<typename T> // requires Element<T>() (§19.3.3)
class vector3 {
public:
    using size_type = unsigned long;
    using value_type = T;
    using iterator = T*;
    using const_iterator = const T*;
    // . . .
    iterator begin();
    const_iterator begin() const;
    iterator end();
    const_iterator end() const;
    size_type size();
    // . . .
};


//A using declaration creates an alias for a type; that is, for our vector, iterator is
//a synonym, another name, for the type we chose to use as our iterator : T * .Now,
//for a vector called v, we can write
//vector<int>::iterator p = find(v.begin(), v.end(), 32);
//and
//for (vector<int>::size_type i = 0; i < v.size(); ++i) cout << v[i] << '\n';
//The point is that to write that, we don’t actually have to know what types are
//named by iterator and size_type.In particular, the code above, because it is expressed in terms of iterator and size_type, will work with vectors where size_type
//is not an unsigned long(as it is not on many embedded systems processors) and
//where iterator is not a plain pointer, but a class (as it is on many popular C++
//    implementations).







int main()
try {

    f();
   



    double myArray[5] = { 1.1,  2.2,  3.3,  4.4,  5.5 };

    double myArray2[8] = { 6.1,  9.2,  3.8,  3.4,  5.9, 6.4, 6.7, 4.4 };

	double* myArray3 = new double[5] { 1.1, 2.2, 3.3, 4.4, 5.5 };

    char myArray4[8] = { "ABCDEFG"};

    char* myArray5 =  new char[3]{ 'A', 'B', 'C'};

    std::cout << myArray4 << " ";

    std::cout << myArray3 << " ";

	copy(myArray, myArray + 5, myArray2);

	double* print = myArray2;

    for (int i = 0; i < sizeof(myArray2) / sizeof(myArray2[0]); ++i) 
        std::cout << myArray2[i] << " ";
    

    }

catch (std::exception& e) {
    std::cerr << e.what() << '\n';
}
catch (...) {
    std::cerr << "something bad happened\n";
}
