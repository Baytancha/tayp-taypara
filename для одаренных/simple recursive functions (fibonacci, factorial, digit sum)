int fibonacci(int count)
{
    if (count == 0)
        return 0; 
    if (count == 1)
        return 1; 
    return fibonacci(count - 1) + fibonacci(count - 2);
}


int  factorial (int count)
{
    
    if (count == 1)
        return 1;

    return factorial(count - 1) * count;;
}



int digitSum (int count)
{

    if (count < 10) return count;

    return digitSum(count/10) + count%10;
}
























//stack grows downward::

void stack_addresses(int x) {

	int z = x;

	std::cout << &z << "\n";

	if (z <=100)
	stack_addresses(z + 10);

}

//addresses aren't growing strictly up or down
void heap_addresses(int x) {

	int* z = new int{ x };

	std::cout << z << "\n";

	if (*z <= 100)
		heap_addresses(*z + 10);
}


//addresses aren't growing strictly up or down
for (int i = 0; i < 10; ++i) {
		int* z = new int{ i };
		std::cout << z << "\n";

	}
