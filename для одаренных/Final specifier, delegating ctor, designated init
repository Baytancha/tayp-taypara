Final specifier
Specifies that a virtual function cannot be overridden in a derived class or that a class cannot be inherited from.

struct A {
  virtual void foo();
};

struct B : A {
  virtual void foo() final;
};

struct C : B {
  virtual void foo(); // error -- declaration of 'foo' overrides a 'final' function
};


Delegating constructors
Constructors can now call other constructors in the same class using an initializer list.

struct Foo {
  int foo;
  Foo(int foo) : foo{foo} {}
  Foo() : Foo(0) {}
};

Foo foo;
foo.foo; // == 0


Constructors are allowed to delegate (transfer responsibility for) initialization to another constructor from the same class type. 
This process is sometimes called constructor chaining and such constructors are called delegating constructors.

To make one constructor delegate initialization to another constructor, simply call the constructor in the member initializer list. 
Applied to our example above:

class Employee
{
private:
    std::string m_name{};
    int m_id{ 0 };

public:
    Employee(std::string_view name)
        : Employee{ name, 0 } // delegate initialization to Employee(std::string_view, int) constructor
    {
    }

    Employee(std::string_view name, int id)
        : m_name{ name }, m_id{ id } // actually initializes the members
    {
        std::cout << "Employee " << m_name << " created\n";
    }

};

int main()
{
    Employee e1{ "James" };
    Employee e2{ "Dave", 42 };
}


The downside of this method is that it sometimes requires duplication of initialization values. 
In the delegation to the Employee(std::string_view, int) constructor, we need an initialization 
value for the int parameter. We had to hardcode literal 0, as there is no way to reference the default member initializer.

A few additional notes about delegating constructors. First, a constructor that delegates to 
another constructor is not allowed to do any member initialization itself. So your constructors 
can delegate or initialize, but not both.


Note that we had Employee(std::string_view) (the constructor with less parameters) delegate to Employee(std::string_view name, int id) 
(the constructor with more parameters). It is common to have the constructor with fewer parameters delegate to the constructor with more parameters.

If we had instead chosen to have Employee(std::string_view name, int id) delegate to Employee(std::string_view), then that would have left us 
unable to initialize m_id using id, as a constructor can only delegate or initialize, not both.





A conundrum: Redundant constructors vs redundant default values

In the above examples, we used delegating constructors and then default arguments to reduce constructor redundancy. 
But both of these methods required us to duplicate initialization values for our members in various places. 
Unfortunately, there is currently no way to specify that a delegating constructor or default argument should use the default member initializer value.

There are various opinions about whether it is better to have fewer constructors (with duplication of initialization values) 
or more constructors (with no duplication of initialization values). Our opinion is that itâ€™s usually more straightforward 
to have fewer constructors, even if it results in duplication of initialization values.











something similar (designated init):
struct Employee
{
    int id {};
    int age {};
    double wage {};
};

int main()
{
    Employee joe { 1, 32, 60000.0 };
    joe = { joe.id, 33, 66000.0 }; // Joe had a birthday and got a raise

    return 0;
}





