struct Derived1: Base1 {

    void printType() { std::cout << "returned a Derived1\n"; }
};



class Base
{
public:
    virtual Base1* getThis() { std::cout << "called Base::getThis()\n"; return new Base1{}; }
    void printType() { std::cout << "returned a Base\n"; }
};

class Derived : public Base
{
public:
    Derived1* getThis() override { std::cout << "called Derived::getThis()\n";  return new Derived1{}; }
    void printType() { std::cout << "returned a Derived\n"; }
};


int main()
try {

    Derived d{};
    Base* b{ &d };
    Derived* d1{ &d };
    d.getThis()->printType(); // calls Derived::getThis(), returns a Derived*, calls Derived::printType
    b->getThis()->printType(); //upcasting from Derived1 to Base1 because the compiler must know all the types 
    d1->getThis()->printType();
    return 0;


    /*called Derived::getThis()
     returned a Derived1
     called Derived::getThis()
     returned a Base1
     called Derived::getThis()
     returned a Derived1*/





}



Should we make all destructors virtual?

This is a common question asked by new programmers. As noted in the top example, 
if the base class destructor isn’t marked as virtual, then the program is at risk 
for leaking memory if a programmer later deletes a base class pointer that is pointing 
to a derived object. One way to avoid this is to mark all your destructors as virtual. 
But should you?

It’s easy to say yes, so that way you can later use any class as a base class -- 
but there’s a performance penalty for doing so (a virtual pointer added to every 
instance of your class). So you have to balance that cost, as well as your intent.

Conventional wisdom (as initially put forth by Herb Sutter, a highly regarded C++ guru) 
has suggested avoiding the non-virtual destructor memory leak situation as follows, 
“A base class destructor should be either public and virtual, or protected and nonvirtual.” 
A class with a protected destructor can’t be deleted via a pointer, thus preventing the 
accidental deleting of a derived class through a base pointer when the base class has a 
non-virtual destructor. Unfortunately, this also means the base class can’t be deleted through 
a base class pointer, which essentially means the class can’t be dynamically allocated or deleted 
except by a derived class. This also precludes using smart pointers (such as std::unique_ptr and 
std::shared_ptr) for such classes, which limits the usefulness of that rule. It also means the base 
class can’t be allocated on the stack. That’s a pretty heavy set of penalties.









