std::int8_t	1 byte signed	-128 to 127	Treated like a signed char on many systems. See note below.
std::uint8_t	1 byte unsigned	0 to 255	Treated like an unsigned char on many systems. See note below.
std::int16_t	2 byte signed	-32,768 to 32,767	
std::uint16_t	2 byte unsigned	0 to 65,535	
std::int32_t	4 byte signed	-2,147,483,648 to 2,147,483,647	
std::uint32_t	4 byte unsigned	0 to 4,294,967,295	
std::int64_t	8 byte signed	-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807	
std::uint64_t	8 byte unsigned	0 to 18,446,744,073,709,551,615	



Prefer int when the size of the integer doesn’t matter (e.g. the number will always fit within the range of a 2-byte signed integer). For example, if you’re asking the user to enter their age, or counting from 1 to 10, it doesn’t matter whether int is 16 or 32 bits (the numbers will fit either way). This will cover the vast majority of the cases you’re likely to run across.
Prefer std::int#_t when storing a quantity that needs a guaranteed range.
Prefer std::uint#_t when doing bit manipulation or where well-defined wrap-around behavior is required.
Avoid the following when possible:

short and long integers -- use a fixed-width type instead.
Unsigned types for holding quantities.
The 8-bit fixed-width integer types.
The fast and least fixed-width types.
Any compiler-specific fixed-width integers -- for example, Visual Studio defines __int8, __int16, etc…


sizeof must be able to return the size of an object (in bytes) using a value of type std::size_t. 
Therefore, the largest object creatable on a system has a size (in bytes) equal to the largest value 
std::size_t can hold. If it were possible to create a larger object, sizeof would not be able to return 
its size, as it would overflow the range of std::size_t.

Therefore, any object with a size (in bytes) larger than the largest value an object of type std::size_t 
can hold is considered ill-formed (and will cause a compile error).

For example, the range of a 4-byte unsigned integral type is 0 to 4,294,967,295. Assuming std::size_t is 4 bytes
in size, then an object of type std::size_t can hold an integral value from 0 to 4,294,967,295. This means the largest 
object creatable on such a system is 4,294,967,295 bytes (and calling sizeof on that object would return exactly 4,294,967,295).








