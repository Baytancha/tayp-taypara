

COPY:
Inside generateResource(), local variable res is created and initialized with a dynamically allocated Resource, which causes the first “Resource acquired”.
Res is returned back to main() by value. We return by value here because res is a local variable -- it can’t be returned by address or reference because res will be destroyed when generateResource() ends. So res is copy constructed into a temporary object. Since our copy constructor does a deep copy, a new Resource is allocated here, which causes the second “Resource acquired”.
Res goes out of scope, destroying the originally created Resource, which causes the first “Resource destroyed”.
The temporary object is assigned to mainres by copy assignment. Since our copy assignment also does a deep copy, a new Resource is allocated, causing yet another “Resource acquired”.
The assignment expression ends, and the temporary object goes out of expression scope and is destroyed, causing a “Resource destroyed”.
At the end of main(), mainres goes out of scope, and our final “Resource destroyed” is displayed.

MOVE:
Inside generateResource(), local variable res is created and initialized with a dynamically allocated Resource, which causes the first “Resource acquired”.
Res is returned back to main() by value. Res is move constructed into a temporary object, transferring the dynamically created object stored in res to the temporary object. We’ll talk about why this happens below.
Res goes out of scope. Because res no longer manages a pointer (it was moved to the temporary), nothing interesting happens here.
The temporary object is move assigned to mainres. This transfers the dynamically created object stored in the temporary to mainres.
The assignment expression ends, and the temporary object goes out of expression scope and is destroyed. However, because the temporary no longer manages a pointer (it was moved to mainres), nothing interesting happens here either.
At the end of main(), mainres goes out of scope, and our final “Resource destroyed” is displayed.


The move constructor and move assignment are called when those functions have been defined, and the argument for construction or assignment is an rvalue. Most typically, this rvalue will be a literal or temporary value.

The copy constructor and copy assignment are used otherwise (when the argument is an lvalue, or when the argument is an rvalue and the move constructor or move assignment functions aren’t defined).




The terms "universal reference" and "rvalue reference" in C++ are often used interchangeably, 
but they describe slightly different but related concepts.

An rvalue reference is denoted by && and binds only to rvalues, which are typically temporary 
objects or literals that are not associated with any memory location. This concept is used in C++ 
to allow for efficient transfer of resources, such as during move semantics or perfect forwarding 5.

// Example of rvalue reference
int&& rvalueRef = 5;
On the other hand, the term "universal reference" was coined by Scott Meyers to describe 
a situation where an rvalue reference is used with a cv-unqualified template parameter. 
In this case, the reference can bind to either an lvalue or rvalue depending on the argument provided. 
This is possible due to a feature in C++ called reference collapsing 1.

// Example of universal reference
template <typename T>
void foo(T&& universalRef) { /* ... */ }

In the above code, foo can take either an lvalue or rvalue as an argument. If it's called with an lvalue, 
T will be deduced to be Type&, and Type& && will collapse to Type&. If it's called with an rvalue, T will
be deduced to be Type, and Type && remains as Type && 3.

The C++ standard later adopted the term "forwarding reference" instead of "universal reference", 
arguing that the former more accurately describes the behavior of the reference. Regardless of 
the terminology, the underlying concept remains the same 1.
In conclusion, the key difference is that an rvalue reference binds only to rvalues, while a universal 
(or forwarding) reference can bind to either lvalues or rvalues, depending on the argument provided. 
This distinction is important for understanding how move semantics and perfect forwarding work in C++














