REUSABLE FUNCTIONALITY USE CASE:
template <class T>
struct MakeDouble {
    T double() {
        auto& me = static_cast<T&>(*this);
        return me + me;
};
class Matrix : MakeDouble<Matrix> ...

Matrix m;
auto m2 = m.double();

The trick is to declare a helper method inside Widget that creates the Property and adds 
the Widgetâ€˜s this pointer as the final parameter.

You can make this reusable by factoring it into a helper base class that 
uses the curiously recurring template pattern (commonly known as CRTP).

template<typename D>
struct PropertyHelper
{
    Property Prop(char const* name, int initial)
    { return Property(name, initial, static_cast<D*>(this)); }
};

struct Widget : Object, PropertyHelper<Widget>
{
    Property Height{ Prop("Height", 10) };
    Property Width{ Prop("Width", 10) };
};


POLYMORPHIC INTERFACE USE CASE:
template<typename T>
struct Base {
    T& derived() { return static_cast<T&>(*this); }
    void print() { derived().print(); };
};

struct nonDerived {
    void print() { cout << "nonDerived\n"; };
};

struct Derived : public Base<Derived> {
	void print() { cout << "Derived\n"; };
};

template<typename T>
void interface_(Base<T>* t) {
    t->print();
}

template<typename T>
void interface_2(Base<T>& t) {
t.print();
}

int main()
try {
    Derived d;
    nonDerived n;

    Base<Derived>* b1 = &d;
    Base<Derived>* b2 = new Derived();
    Base<Derived>& b3 = d;

    //Base<nonDerived>* b3 = &n;
    //Base<nonDerived>* b4 = new nonDerived();

    interface_(b2);

    interface_(&d);
    interface_(b1);

    interface_2(d);
    interface_2(b3);


    int x = 0;
    cin >> x;

    if (x >0)
        interface_(&d);
	else if (x < 0)
        interface_(&d);






template<typename D>
struct PropertyHelper
{
    Property Prop(char const* name, int initial)
    { return Property(name, initial, static_cast<D*>(this)); }
};

struct Widget : Object, PropertyHelper<Widget>
{
    Property Height{ Prop("Height", 10) };
    Property Width{ Prop("Width", 10) };
};






struct Object
{

///other methods elided


Property Prop(char const* name, int initial)
    { return Property(name, initial, this); }

};

struct Widget : Object
{
    Property Height{ Prop("Height", 10) };
    Property Width{ Prop("Width", 10) };
};




Can you tell me if this wouldn't work, and why? Wouldn't the Property Prop function directly 
get the pointer to the base object Object without the need for templates and conversions?




So when we create an object Widget x, a base object Object and a base object PropertyHelper<Widget> 
with their own addresses are created underneath it, and the this pointer in x points to all those 
base classes as well, is that correct?

Not quite. The base classes aren't separate objects, they are the same object. Given a class B that 
inherits from class A. Rather than creating an object B that owns an object A, what actually happens 
is that B is an object that contains all of its own members and methods, while also containing all o
f the members and methods of class A. Think of B as a superset of A, that can use the methods / members from both A and B.

But because with PropertyHelper<Widget> we don't actually pass the address of the x anywhere but 
just instantiate the template, we need some way to pass the information about x to the Property 
Prop function, so that it would ''find'' the correct pointer. We do so by making it convert from 
the this pointer to the base class object to the pointer of the object itself. And because 
PropertyHelper<Widget> is a base object of x and thus 'tied to it', the compiler deduces wher the
object is by converting from the base. Is that it?

The code above isn't "finding" any pointers. What's happening here is that we are changeing the way
we interpret the memory of the this pointer by calling static_cast

A pointer is just an address in memory, nothing more. The type that we interpret the pointer as is
used as a guide for how to read that memory. So a pointer of type "Widget" would know that the 
object being pointed to is sizeof(Widget) and what offsets it needs to apply to the pointer address 
to access it's members ect.

While we are inside a member method of the base class, the process only knows about the direct class
that we are inside of. So calling this when inside PropertyHelper<Widget> will return PropertyHelper<Widget>*. 
But here's the thing, the object that we are calling this method on may actually be a subclass of 
PropertyHelper<Widget> such as Widget.

Here's where this code gets clever. Because you have no way of knowing which subclass this is, if any. 
They have added the type of the child class as a template parameter to PropertyHelper. So you know that 
a PropertyHelper<Widget> has a subclass of type Widget. This code makes the assumption that no one would 
inherit from PropertyHelper<Widget> with a different class. But it is not enforced and could be misused, 
resulting in bad casts that result in garbage data (if the pointer was interpreted as the wrong type, 
it would make no sense)

I have simplified how this works somewhat, by explaining everything as if there were only single 
inheritance occuring. The existence of Object complicates matters but the other comments have already 
explained why that is fine and it is not important for this specific answer.







struct Object;


struct Property
{
	Property(char const* name, int initial, Object* owner) :
		m_name(name), m_value(initial), m_owner(owner) {}

	char const* m_name;
	Object* m_owner;
	int m_value;
};


struct Object
{
	Property Prop(char const* name, int initial)
	{
		return Property(name, initial, this);
	}
	///other methods elided


};


struct Widget : Object
{

	Property Height{ Prop("Height", 10) };
	Property Width{ Prop("Width", 10) };
};




int main()
try {


	Widget x;

	Property z = x.Prop("bork", 12);

	std::cout << x.Height.m_owner << "\n";

	std::cout << &x << "\n";

	return 0;

}
catch (std::exception& e) {
	std::cerr << e.what() << '\n';
}
catch (...) {
	std::cerr << "something bad happened\n";
}



Ah, so this is where multiple inheritance does become important. Because widget inherits from both Object and 
PropertyHelper<Widget>, 
the data of PropertyHelper<Widget> is actually offset a bit inside the Widget object.

Classes are generally organised by laying out their base class members followed by the sub class members. 
So given my A and B example above it would look something like this:

Instance of B

data from A

data from B

If you introduce multiple inheritance, both of these base classes get packed at the start of 
the classes data. So from the code above it would be:

Instance of Widget

data from Object

data from PropertyHelper<Widget>

data from Widget

Due to this, the compiler does some trickery when we call things such as this and static_cast 
to adjust the pointer to point to the correct offset within the object. So when you call this 
inside a method in PropertyHelper<Widget>, rather than getting a pointer with the address of 
the Widget object, you get a pointer that is "address of widget + sizeof(Object)". However 
if you called this inside a method on Object, this would be the same as calling it on Widget, 
as the data is not offset in the case.

In this particular instance, we are casting the pointer back to its actual type of Widget, and 
the compiler will perform a down cast and adjust the address of the pointer to accommodate, so
that it actually points at Widget, rather than widget + sizeof(Object)

Your code could work if you were only inheriting from one class (or if PropertyHelper<Widget> 
was the first base class), but multiple inheritance makes the static_cast necessary here










