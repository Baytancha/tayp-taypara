FTAD
std::cout << max<int>(1, 2) << '\n'; // specifying we want to call max<int>
std::cout << max<int>(1, 2) << '\n'; // specifying we want to call max<int>
std::cout << max<>(1, 2) << '\n';
std::cout << max(1, 2) << '\n';

In either case, the compiler will see that we haven’t provided an actual type, so it will attempt to deduce an actual type 
from the function arguments that will allow it to generate a max() function where all template parameters match the type 
of the provided arguments. In this example, the compiler will deduce that using function template max<T> with actual type 
int allows it to instantiate function max<int>(int, int) where the type of both template parameters (int) matches the type of the provided arguments (int).

The difference between the two cases has to do with how the compiler resolves the function call from a set of overloaded functions. 
  In the top case (with the empty angled brackets), the compiler will only consider max<int> template function overloads when 
determining which overloaded function to call. In the bottom case (with no angled brackets), the compiler will consider both 
max<int> template function overloads and max non-template function overloads.



#include <utility> // for std::pair

int main()
{
    std::pair<int, int> p1{ 1, 2 }; // explicitly specify class template std::pair<int, int> (C++11 onward)
    std::pair p2{ 1, 2 };           // CTAD used to deduce std::pair<int, int> from the initializers (C++17)

    return 0;
}


// define our own Pair type
template <typename T, typename U>
struct Pair
{
    T first{};
    U second{};
};

int main()
{
    Pair<int, int> p1{ 1, 2 }; // ok: we're explicitly specifying the template arguments
    Pair p2{ 1, 2 };           // compile error in C++17 (okay in C++20)

    return 0;
}


If you compile this in C++17, you’ll likely get some error about “class template argument deduction failed” or “cannot deduce template arguments” 
or “No viable constructor or deduction guide”. This is because in C++17, CTAD doesn’t know how to deduce the template arguments for aggregate 
class templates. To address this, we can provide the compiler with a deduction guide, which tells the compiler how to deduce the template arguments 
for a given class template.


template <typename T, typename U>
struct Pair
{
    T first{};
    U second{};
};

// Here's a deduction guide for our Pair (needed in C++17 only)
// Pair objects initialized with arguments of type T and U should deduce to Pair<T, U>
template <typename T, typename U>
Pair(T, U) -> Pair<T, U>;

int main()
{
    Pair<int, int> p1{ 1, 2 }; // explicitly specify class template Pair<int, int> (C++11 onward)
    Pair p2{ 1, 2 };           // CTAD used to deduce Pair<int, int> from the initializers (C++17)

    return 0;
}

Non-aggregates don’t need deduction guides in C++17 because the presence of a constructor serves the same purpose.

#include <utility> // for std::pair

struct Foo
{
    std::pair<int, int> p1{ 1, 2 }; // ok, template arguments explicitly specified
    std::pair p2{ 1, 2 };           // compile error, CTAD can't be used in this context
};

int main()
{
    std::pair p3{ 1, 2 };           // ok, CTAD can be used here
    return 0;
}







