
#include <string>
#include <iostream>
#include <memory>
#include <stdexcept>
#include <vector>
#include <cmath>
#include <algorithm>
#include <list>
#include <array>










int main()
try {
   
    keep_window_open();    // cope with Windows console mode
    return 0;
}
catch (exception& e) {
    cerr << e.what() << endl;
    keep_window_open("~~");
    return 1;
}
catch (...) {
    cerr << "exception \n";
    keep_window_open("~~");
    return 2;
}


int main()
try {
   
    keep_window_open();    // cope with Windows console mode
    return 0;
}
catch (out_of_range) {
    cerr << "OUT OF RANGE ERROR" << endl;
    keep_window_open("~~");
    return 1;
}

catch (runtime_error& e) {
    cerr << e.what() << endl;
    keep_window_open("~~");
    return 1;
}

catch (...) {
    cerr << "exception \n";
    keep_window_open("~~");
    return 2;
}


















void calculate()
{
    while (cin)
        try {
        cout << prompt;
        Token t = ts.get();
        while (t.kind == print) t = ts.get();    // first discard all "prints"
        if (t.kind == quit) return;        // quit
        ts.putback(t);
        cout << result << statement() << endl;
    }
    catch (exception& e) {
        cerr << e.what() << endl;        // write error message
        clean_up_mess();
    }
}






void Token_stream::ignore(char c)
// c represents the kind of a Token
{
    // first look in buffer:
    if (full && c == buffer.kind) {
        full = false;
        return;
    }
    full = false;

    // now search input:
    char ch = 0;
    while (cin >> ch)
        if (ch == c) return;
}







vector<string> numbers 
{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };





int main()
{
    cout << "Enter a series of temperatures to get the median (followed by '|' or a another non double/integer character):\n";

    vector<double> temps; // temperatures
    for (double temp; cin >> temp; ) // read into temp
        temps.push_back(temp);  // put temp into vector


    // compute mean temperature:
    double sum = 0;
    for (double x : temps)  sum += x;
    cout << "Average temperature: " << sum / temps.size() << '\n';

    // compute median temperature:
    sort(temps); // sort temperatures

    double median = -1;
    if (temps.size() > 1 && 0 == temps.size() % 2)
        median = (temps[temps.size() / 2 - 1] + temps[temps.size() / 2]) / 2.0;
    else
        median = temps[temps.size() / 2];

    cout << "Median temperature: " << median << '\n';

    return 0;
}






















bool IsPrime(int i_nNumber, vector<int> i_naPrimes)
{
    for (int prime : i_naPrimes)
    {
        if ( i_nNumber % prime == 0)
            return false;
    }
    return true;
}

int main() {

    vector<int> naPrimes{ 2 };

    for (int nNumber = 2; nNumber <= 100; ++nNumber)
    {
        if (IsPrime(nNumber, naPrimes))
        {
            naPrimes.push_back(nNumber);
        }
    }

    cout << "Found prime numbers between 1 and 100: \n";
    for (int nPrime : naPrimes)
    {
        cout << nPrime << " ";
    }
    cout << '\n';

    return 0;
}






string digit;
    int value;
    bool validinput{ true };
    while (validinput )
    {
        if (cin >> value) 
        {
            string result  = convertIntToString(value);
            if (" " != result) 
                cout << result << '\n';

        }
        else
        {
            cin.clear (); // To use cin again after a failed read, you need to use a function call "cin.clear();" to "clear" it.
            cin >> digit;
            if (digit == "|")
                validinput = false;
             else 
            {
                int result = convertStringToInt(digit); 
                if (-1 != result)
                    cout << result <<  '\n';
            }

        }

    }

    return 0;
}







for (int i = 0; i < numbers.size(); ++i)	
			if (numbers[i] == s) vall = i;
		return vall;













vector<string> split(const string& s)
    // return a vector of whitespace separated substrings of s
{
    vector<string> v;
    istringstream ss {s};

    for (string sub; ss >> sub; )
        v.push_back(sub);

    return v;
}


/////////////////////////////////////////////
function hiding and function overriding
struct B {
    virtual void f() const { cout << "B::f "; }
    void g() const { cout << "B::g "; } // not virtual
};

struct D : B {
    void f() const { cout << "D::f "; }
    //void g() const { cout << "D::g "; }
};

struct DD : D {
    void g() const { cout << "DD::g "; }
};

void call(const B& b)

{
    b.f();
    b.g();
}

void call2(const D& d)

{
    d.f();
    d.g();
}





//------------------------------------------------------------------------------

int main()
try {
   
    B b;
    D d;
    DD dd;
    call2(dd);
    dd.f(); dd.g();

















