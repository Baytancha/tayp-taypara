//Here are two versions of the read functions, "safe" and "unsafe" version

safe version: safe allocation on the heap via new operator:
void read_new(std::istream& is) {
	char x;
	int i = 0;
	int c = 0;
	char* p = nullptr;
	while (true) {
		is.get(x);
		++c;
		if (x == '!') {
			if (p == nullptr)  break;
			char* tp = new char[c];
			for (int i = 0; i < c - 1; ++i)
			{tp[i] = p[i];}
			tp[c - 1] = '\0';
			delete[] p;
			p = tp; break;	
		}		
	 char* tp = new char[c];
		for (int i = 0; i < c - 1; ++i)
		{tp[i] = p[i];}
			tp[c - 1] = x;
			delete[] p;
			p = tp;
			++i;
	}
	print_ar(std::cout, p, i);
}

unsafe version which allocates the array by pointer incrementation, addresses aren't checked hence risk of UB
void read_new(std::istream& is) {
	char x = '0';
	int i = 0;
	char* p = nullptr;
	char* rt = nullptr;
	while (true) {
		
		is.get(x); // for whitespace characters
		if (x != '!') {
			if (i == 0) {
				
				p = new char{ x };
				rt = p;
			}
			else {
				
				char* tp = ++p;
				*tp = x;
			}
			++i;
		}
		else break;
	}
	print_ar(std::cout, rt, i);
}



//////////////////////////////////////////////////////////////////
Exercise 8

void read_str(std::istream& is, std::string* str) {
	char x = '0';
	int i = 0;
	while (true) {

		is.get(x);
		if (x != '!') {
			if (i == 0) {
				
				*str = x;
			}
			else {
			
				*str = *str + x;
			}
			++i;
		}
		else break;
	}

	std::cout << *str;
}


void print_ar(std::ostream& os, char* a, int n) {
	for (int i = 0; i < n; ++i) {
		os << i << " " << a[i] << " ";
	}
}




int main()
try {

	read_new(std::cin);

	std::string str;

	//read_str(std::cin, &str);


	return 0;

}
catch (std::exception& e) {
	std::cerr << e.what() << '\n';
}
catch (...) {
	std::cerr << "something bad happened\n";







discarded version
///////////////////////////
void read_new(std::istream& is) {
	char x;
	int i = 0;
	int c = 0;
	char* p = nullptr;
	while (true) {
		is.get(x);
		++c;
		if (x != '!') {
			if (i == 0) {
		               p = new char{ x };
			}
			else {
				char* tp = new char[c];
				for (int i = 0; i < c - 1; ++i)
				{
					tp[i] = p[i];
				}
				tp[c - 1] = x;
				delete[] p;
				p = tp;	
			}
			++i;
		}
		else { 
			if (p != nullptr) {
				char* tp = new char[c];
				for (int i = 0; i < c - 1; ++i)
				{
					tp[i] = p[i];
				}
				tp[c - 1] = '\0';
				delete[] p;
				p = tp; break;
			}
			break; }
	}
	print_ar(std::cout, p, i);
}

void print_ar(std::ostream& os, char* a, int n);















}
