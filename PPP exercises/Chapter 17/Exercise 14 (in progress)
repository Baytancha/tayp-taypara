class Link {
public:
    string value;

    Link(const string& v, Link* s = nullptr)
        : value{ v }, succ{ s } { }

    Link* insert(Link* n);          // insert n before this object
    Link* add(Link* n);             // insert n after this object
    Link* erase();                  // remove this object from list
    Link* find(const string& s);    // find s in list
    const Link* find(const string& s) const;    // find s in const list
    // (see 18.5.1)
    const Link* advance(int n) const;   // move n positions in list

    Link* next() const { return succ; }
private:
    Link* succ;
};

//proper insertion can be done when first link is marked as 'the first'

//Link* Link::insert(Link* n)         // insert n before p; return n
//{
//    if (n == nullptr) return this;  // nothing to insert
//    if (this == nullptr) return n;  // nothing to insert into
//
//   
//    n->succ = this;                                            
//    return n;
//}

Link* Link::add(Link* n)
{
    if (n == nullptr) return this;  
    if (this == nullptr) return n;  
    if (succ) n->succ = succ;
    succ = n;
    return n;
}

Link* Link::erase()                 // remove this object from the list
{
    if (this == nullptr) return nullptr;
    Link* p = this;
    while (p->succ != this) {
        p = p->next();
    }
    p->succ = succ;
    delete this;
    return succ;
}

Link* Link::find(const string& s)   // find s as value in list
{
    Link* p = this;
    while (p) {
        if (p->value == s) return p;
        p = p->next();
    }
    return nullptr;
}


const Link* Link::find(const string& s) const
{
    const Link* p = this;
    while (p) {
        if (p->value == s) return p;
        p = p->next();
    }
    return nullptr;
}

const Link* Link::advance(int n) const
{
    const Link* p = this;
    if (0 < n) {
        while (n--) {
            if (p->succ == nullptr) return 0;
            p = p->next();
        }
    }
    else if (n < 0) {
        std::runtime_error("Can't traverse backwards");
    }
    return this;
}

void print_all(Link* p)
{
    cout << "{ ";
    while (p) {
        cout << p->value;
        if (p = p->next()) cout << ", ";
    }
    cout << " }";
}


int main()
try {
    Link* norse_gods = new Link{ "Thor" };
    norse_gods = norse_gods->insert(new Link{ "Odin" });
    norse_gods = norse_gods->insert(new Link{ "Zeus" });
    norse_gods = norse_gods->insert(new Link{ "Freia" });
    Link* greek_gods = new Link{ "Hera" };
    greek_gods = greek_gods->insert(new Link{ "Athena" });
    greek_gods = greek_gods->insert(new Link{ "Mars" });
    greek_gods = greek_gods->insert(new Link{ "Poseidon" });

 
    print_all(norse_gods);
    cout << "\n";
    print_all(greek_gods);
    cout << "\n";

   const Link* z = greek_gods->find("Mars");



    Link* p = greek_gods->find("Mars");
    if (p) p->value = "Ares";

    Link* p2 = norse_gods->find("Zeus");
    if (p2) {
        if (p2 == norse_gods) norse_gods = p2->next();
        p2->erase();
        greek_gods = greek_gods->insert(p2);
    }

    print_all(norse_gods);
    cout << "\n";
    print_all(greek_gods);
    cout << "\n";

 

	return 0;

}
catch (std::exception& e) {
	std::cerr << e.what() << '\n';
}
catch (...) {
	std::cerr << "something bad happened\n";
}
