
//*s != '\0' means !*s; s == nullptr means !s;
char* findx(const char* s, const char* x) {
	if (!s || !x)   return nullptr; 
	int count = 0; //out param to check results of the for loop
	for (; *s; ++s) {
		const char* temp = x; //to reset the word ptr after loop break;
		for (; *temp; ++temp) {
			if (!*s) {  return nullptr; } //if we reach end of sequence during successful matching
			if (*s == *temp) ++count; 
			else { if (count!=0) --s; //set back by one char in case the word starts with the same char as previous one (eg, now and nnow
			count = 0; 
			break; }
			++s; //advance to next char
		}
		if (count != 0) { s-=count; break; } //reset ptr to where the word starts
	}
	return  *s ? const_cast<char*>(s) : nullptr; //if we reach end of sequence after failed matches
}


int main()
try {
    
	char d[] = "Find it, and find it now too fast";
	char w[] = "now";
	const char* n = findx(d, w);
	std::cout << "The first occurence if the word " << w << " is at: " << n;


    return 0;

}
catch (std::exception& e) {
    std::cerr << e.what() << '\n';
}
catch (...) {
    std::cerr << "something bad happened\n";
}





///////////////////////////////////////////////////////////////////////
alternative version:
char* findx(const char* s, const char* x) {

	const char* t_s = s;  // for counting chars in s
	int s_count = 0;
	while (*t_s != '\0') {
		++s_count;
		++t_s;
	}
	++s_count;

	const char* t_x = x;  // for counting chars in x
	int x_count = 0;
	while (*t_x != '\0') {
		++x_count;
		++t_x;
	}
	 // we don't include null in the count 
	const char* ts = s; // for tracking the s[i] in the main for loop
	int count = 0; //if we count enough matches we break the loop
	int address_x = 0; //the index of the first character where we get successful match 
	//main loop where we iterate over each character and compare it with the x sequence
	int index = 0; //to check for out of bounds access
	for (int i = 0; i < s_count; ++i) {
		address_x = i;
		const char* tss = ts;
		const char* txx = x;
		//folded loop where we match with x starting from current index 
		for (int z = 0; z < x_count; ++z) {
			if (s_count <= z + i) { // return null if word is larger then the sequence
				return nullptr;
			}
		    tss += z;
			if (*tss == *txx) { ++count; } //comparing characters
			else count = 0;
			++txx; //advancing to next character
			tss -= z; //resetting pointer to avoid comparing with wrong index 
		}
		if (count == x_count) { break; } //searching for the first occurence only
		//advancing to the next character in the sequence
		++ts;	
	}
	const char* rtrn = s;
	rtrn += address_x; //advance to the correct index 
	char* p = const_cast<char*>(rtrn); 
	return p;
}


