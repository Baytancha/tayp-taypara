
//*s != '\0' means !*s; s == nullptr means !s;
char* findx(const char* s, const char* x) {
	if (!s || !x)   return nullptr; 
	int count = 0; //out param to check results of the for loop
	for (; *s; ++s) {
		const char* temp = x; //to reset the word ptr after loop break;
		for (; *temp; ++temp) {
			if (!*s) {  return nullptr; } //if we reach end of sequence during successful matching
			if (*s == *temp) ++count; 
			else { if (count!=0) --s; //set back by one char in case the word starts with the same char as previous one (eg, now and nnow
			count = 0; 
			break; }
			++s; //advance to next char
		}
		if (count != 0) { s-=count; break; } //reset ptr to where the word starts
	}
	return  *s ? const_cast<char*>(s) : nullptr; //if we reach end of sequence after failed matches
}


int main()
try {
    
	char d[] = "Find it, and find it now too fast";
	char w[] = "now";
	const char* n = findx(d, w);
	std::cout << "The first occurence if the word " << w << " is at: " << n;


    return 0;

}
catch (std::exception& e) {
    std::cerr << e.what() << '\n';
}
catch (...) {
    std::cerr << "something bad happened\n";
}



