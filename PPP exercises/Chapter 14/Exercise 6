
Sstriped_circle circa(Point(100, 200), 100);
	circa.set_color(Color::dark_red);
	win.attach(circa);
	win.wait_for_button();


	Sstriped_circle circ(Point(500, 400), 200);
	circ.set_color(Color::dark_green);
	win.attach(circ);
	win.wait_for_button();













/////////////////////////////////////////////////////
header code

version 1
/struct Sstriped_circle : Circle {
    Sstriped_circle(Point xy, int rr) : Circle(xy, rr)
    {

        const float PiOn180 = 3.1415926535f / 180.0f;
        const float angle = 1 * PiOn180;

        for (int i = 0; i < 360; ++i) {

            s.add(Point(center().x + std::cos(i * angle) * rr, center().y - std::sin(i * angle) * rr),
                Point(center().x - std::cos(i * angle) * rr, center().y - std::sin(i * angle) * rr));
        }
        
        s.set_color(Circle::color());
        s.set_style(Line_style(Line_style::solid, 2));
    }

//////////////////////////////////////////////////////////////////

version 2
struct Sstriped_circle : Circle {
    Sstriped_circle(Point xy, int rr) : Circle(xy, rr)
    {

        const float PiOn180 = 3.1415926535f / 180.0f;
        const float angle = 0.5 * PiOn180;

        for (int i = 0; i < 720; ++i) {

            s.add(Point(center().x + std::cos(i * angle) * rr, center().y - std::sin(i * angle) * rr),
                Point(center().x - std::cos(i * angle) * rr, center().y - std::sin(i * angle) * rr));
        }
        
        s.set_color(Circle::color());
        s.set_style(Line_style(Line_style::solid, 2));
    }

    void draw_lines() const { Circle::draw_lines();  s.draw(); };
    void set_color(Color col) { Circle::set_color(col); s.set_color(col); };

private:
    Lines s;
};













