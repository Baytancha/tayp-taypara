// Ch 10-11.cpp : This file contains the 'main' function. Program execution begins and ends there.
//Write a program that reads the data from raw_temps.txt created in exercise
//2 into a vector and then calculates the mean and median temperatures
//in your data set.Call this program temp_stats.cpp.


#include "std_lib_facilities.h" 

string set{ "IVXLCDM" };
bool Roman_num{ false };

class Roman_int {
public:
    Roman_int(int xx, string ss) : x{ xx }, s{ ss } { }
    Roman_int(int xx);
    Roman_int() : x{ 0 }, s{ " " } { }
    char get_char() const { return s[0]; }
    string get_symb() const { return s; }
    int get_int() const { return x; }
    void set_int(int xx) { x = xx; }
    void set_symb(string ss) { s = ss; }

private:
    string s;
    int x;
};

vector<Roman_int> numerals {Roman_int(1, "I"), Roman_int(5, "V"), Roman_int(10, "X"),
Roman_int(50, "L"), Roman_int(100, "C"), Roman_int(500, "D"), Roman_int(1000, "M"), };

Roman_int::Roman_int(int xx) : x{ xx }, s{ " " }

{
    if (x > 3999) error("Number is too big");
    int n = x;
    string number;
    int div = 1000;

    for (int i = 0; i < 7; ++i)
    {
        
        char last_c{ '0' };
        bool subtract{ false };

        if (n / 1 == 4 || n / 10 == 4 || n / 100 == 4)
        {
            int first{ 0 };
            for (int i = 1; i <= 100; i *= 10)
                if (n / i == 4) first = i;

            for (Roman_int r : numerals)
                if (first == r.get_int())
                {
                    last_c = r.get_char();
                    number += last_c;
                    
                }

            for (Roman_int r : numerals)
                if (first * 5 == r.get_int())
                {
                    last_c = r.get_char();
                    number += last_c;
                    
                }

            n -= first * 4; subtract = true;
        }

        else if (n / 1 == 9 || n / 10 == 9 || n / 100 == 9)

        {
            int first{ 0 };
            for (int i = 1; i <= 100; i *= 10)
                if (n / i == 9) first = i;

            for (Roman_int r : numerals)
                if (first == r.get_int())
                {
                    last_c = r.get_char();
                    number += last_c;
                    
                }

            for (Roman_int r : numerals)
                if (first * 10 == r.get_int())
                {
                    last_c = r.get_char();
                    number += last_c;
                    
                }

            n -= first * 9; subtract = true;

        }

        else if ((n / div) >= 1) {

            for (Roman_int r : numerals)
                if (div == r.get_int())
                {
                    last_c = r.get_char();
                    number += last_c;
                    
                }

            if ((n / div) > 1) {
                for (int i = 0; i < (n / div - 1); ++i)
                    number += last_c;
                
            }

        }

        if (!subtract)
            n -= div * (n / div);

        div = (i % 2 == 0) ? div / 2 : div / 5;

    }

    s = number;
}


ostream& operator<<(ostream& ost, const Roman_int r) {

    cout << r.get_symb() << "\n";

    return ost;
}

istream& operator>>(istream& is, Roman_int& r) {

    string num;
    cin >> num;

    int filtered{ 0 };
    for (int i = 0; i < num.size(); ++i)
        for (char c : set)
            if (num[i] == c) {

                ++filtered;
            }
    if (num.size() != filtered)

    {
        error("Bad number");
    }

    vector<Roman_int> sum;

    for (int i = 0; i < num.size(); ++i)

    {
        for (Roman_int r : numerals)

        {
            if (num[i] == r.get_char())
            {
                sum.push_back(r);
            }
        }

    }

    int nsum{ 0 };
    for (int i = 0; i < sum.size(); ++i)
    {
        if (i != sum.size() - 1)
        {
            if (sum[i].get_int() < sum[i + 1].get_int())
            {
                int n;
             
                n = (sum[i + 1].get_int() - sum[i].get_int());
                nsum = nsum + n;
            }
            else if (i == 0) { nsum += sum[i].get_int(); }


            else if (sum[i - 1].get_int() >= sum[i].get_int())

            {
                nsum += sum[i].get_int();
            }

        }

        else if (i == 0) { nsum += sum[i].get_int(); }

        else if (sum[i - 1].get_int() >= sum[i].get_int()) {
            nsum += sum[i].get_int();
        }


    }

    r.set_symb(num);
    r.set_int(nsum);
    return is;
}



//------------------------------------------------------------------------------




const char number = '8';    // t.kind==number means that t is a number Token
const char quit = 'q';    // t.kind==quit means that t is a quit Token
const char print = ';';    // t.kind==print means that t is a print Token
const char name = 'a';    // name token
const char let = 'L';    // declaration token
const char con = 'C';    // const declaration token
const string declkey = "let";		// declaration keyword 
const string constkey = "const";	// const keyword
const string prompt = "> ";
const string result = "= "; // used to indicate that what follows is a result

//------------------------------------------------------------------------------

class Token {
public:
    char kind;        // what kind of token
    double value;     // for numbers: a value 
    string name;      // for names: name itself
    Token(char ch) : kind(ch), value(0) {}
    Token(char ch, double val) : kind(ch), value(val) {}
    Token(char ch, string n) : kind(ch), name(n) {}
};

//------------------------------------------------------------------------------

class Token_stream {
public:
    Token_stream();   // make a Token_stream that reads from cin
    Token get();      // get a Token (get() is defined elsewhere)
    void putback(Token t);    // put a Token back
    void ignore(char c);      // discard tokens up to an including a c
private:
    bool full;        // is there a Token in the buffer?
    Token buffer; // here is where we keep a Token put back using putback()
    istream& ist;
};

class Variable {
public:
    string name;
    double value;
    bool var;	// variable (true) or constant (false)
    Variable(string n, double v, bool va = true) :name(n), value(v), var(va) { }
};


class Symbol_table {
public:
    double get(string s);
    void set(string s, double d);
    bool is_declared(string var);
    double define(string s, double val, bool var);

private:
    vector<Variable> var_table;

};

Symbol_table tss;

//------------------------------------------------------------------------------

// The constructor just sets full to indicate that the buffer is empty:
Token_stream::Token_stream()
    :full(false), buffer(0), ist(cin)     // no Token in buffer
{
}

//------------------------------------------------------------------------------

// The putback() member function puts its argument back into the Token_stream's buffer:
void Token_stream::putback(Token t)
{
    if (full) error("putback() into a full buffer");
    buffer = t;       // copy t to buffer
    full = true;      // buffer is now full
}

//------------------------------------------------------------------------------

Token Token_stream::get() // read characters from cin and compose a Token
{
    if (full) {         // check if we already have a Token ready
        full = false;
        return buffer;
    }

    char ch;
    cin >> ch;  // note that >> skips whitespace (space, newline, tab, etc.)


    for (char c : set)
        if (ch == c) {
            cin.unget();
            Roman_int tok;
            cin >> tok;
            Roman_num = true;
            return Token(number, tok.get_int());
           
        }

    switch (ch) {
    case quit:
    case print:
    case '(':
    case ')':
    case '+':
    case '-':
    case '*':
    case '/':
    case '%':
    case '=':
        return Token(ch); // let each character represent itself
    case '.':             // a floating-point literal can start with a dot
    case '0': case '1': case '2': case '3': case '4':
    case '5': case '6': case '7': case '8': case '9':    // numeric literal
    {
        cin.putback(ch);// put digit back into the input stream
        double val;
        cin >> val;     // read a floating-point number
        return Token(number, val);
    }

    default:
        if (isspace(ch)) {
            if (ch == '\n') {
                return Token{ print };
            }
        }

        else if
            (isalpha(ch)) {	// start with a letter
            string s;
            s += ch;
            while (cin.get(ch) && (isalpha(ch) || isdigit(ch) || ch == '_')) s += ch;	// letters digits and underscores
            cin.putback(ch);
            if (s == declkey) return Token(let); // keyword "let"
            if (s == constkey) return Token(con); // keyword "const"
            return Token(name, s);
        }
        error("Bad token");
    }
}

//------------------------------------------------------------------------------

void Token_stream::ignore(char c)
// c represents the kind of a Token
{
    // first look in buffer:
    if (full && c == buffer.kind) {
        full = false;
        return;
    }
    full = false;

    // now search input:
    char ch = 0;
    while (cin >> ch)
        if (ch == c) return;
}

//------------------------------------------------------------------------------

Token_stream ts;  // provides get() and putback() 


//------------------------------------------------------------------------------



//------------------------------------------------------------------------------

vector<Variable> var_table;

//------------------------------------------------------------------------------

double Symbol_table::get(string s)
// return the value of the Variable names s
{
    for (int i = 0; i < var_table.size(); ++i)
        if (var_table[i].name == s) return var_table[i].value;
    error("get: undefined variable ", s);
}

//------------------------------------------------------------------------------

void Symbol_table::set(string s, double d)
// set the Variable named s to d
{
    for (int i = 0; i < var_table.size(); ++i)
        if (var_table[i].name == s) {
            if (var_table[i].var == false) error(s, " is a constant");
            var_table[i].value = d;
            return;
        }
    error("set: undefined variable ", s);
}

//------------------------------------------------------------------------------

bool Symbol_table::is_declared(string var)
// is var already in var_table?
{
    for (int i = 0; i < var_table.size(); ++i)
        if (var_table[i].name == var) return true;
    return false;
}

//------------------------------------------------------------------------------

double Symbol_table::define(string s, double val, bool var = true)
// add (s,val,var) to var_table
{
    if (is_declared(s)) error(s, " declared twice");
    var_table.push_back(Variable(s, val, var));
    return val;
}

//------------------------------------------------------------------------------

double expression(Token_stream& ts);    // forward declaration takes a parameter type just as a definition

//------------------------------------------------------------------------------

// deal with numbers and parentheses
double primary(Token_stream& ts)
{
    Token t = ts.get();
    switch (t.kind) {
    case '(':           // handle '(' expression ')'
    {
        double d = expression(ts);
        t = ts.get();
        if (t.kind != ')') error("')' expected");
        return d;
    }
    case number:
    {   return t.value; }    // return the number's value
    case name:
    {
        Token next = ts.get();
        if (next.kind == '=') {	// handle name = expression
            double d = expression(ts);
            tss.set(t.name, d);
            return d;
        }
        else {
            ts.putback(next);		// not an assignment: return the value
            return tss.get(t.name); // return the variable's value
        }
    }
    case '-':
        return -primary(ts);
    case '+':
        return primary(ts);
    default:
        error("primary expected");
    }
}

//------------------------------------------------------------------------------

// deal with *, /, and %
double term(Token_stream& ts)
{
    double left = primary(ts);

    //cout << "left:" << left;
    Token t = ts.get(); // get the next token from token stream

    while (true) {
        switch (t.kind) {
        case '*':
            left *= primary(ts);
            t = ts.get();
            break;
        case '/':
        {
            double d = primary(ts);
            if (d == 0) error("divide by zero");
            left /= d;
            t = ts.get();
            break;
        }
        case '%':
        {
            int i1 = narrow_cast<int>(left);
            int i2 = narrow_cast<int>(term(ts));
            if (i2 == 0) error("%: divide by zero");
            left = i1 % i2;
            t = ts.get();
            break;
        }
        default:
            ts.putback(t);        // put t back into the token stream
            return left;
        }
    }
}

//------------------------------------------------------------------------------

// deal with + and -
double expression(Token_stream& ts)
{
    double left = term(ts); // read and evaluate a Term

    //cout << "left:" << left;
    Token t = ts.get();        // get the next token from token stream

    while (true) {
        switch (t.kind) {
        case '+':
            left += term(ts);    // evaluate Term and add
            t = ts.get();
            break;
        case '-':
            left -= term(ts);    // evaluate Term and subtract
            t = ts.get();
            break;
        default:
            ts.putback(t);     // put t back into the token stream
             return left;       // finally: no more + or -: return the answer
        }
    }
}

//------------------------------------------------------------------------------

double declaration(Token k)
// handle: name = expression
// declare a variable called "name" with the initial value "expression"
// k will be "let" or "con"(stant)
{
    Token t = ts.get();
    if (t.kind != name) error("name expected in declaration");
    string var_name = t.name;

    Token t2 = ts.get();
    if (t2.kind != '=') error("= missing in declaration of ", var_name);

    double d = expression(ts);
    tss.define(var_name, d, k.kind == let);
    return d;
}

//------------------------------------------------------------------------------

double statement(Token_stream& ts)
{
    Token t = ts.get();
    switch (t.kind) {
    case let:
    case con:
        return declaration(t.kind);
    default:
        ts.putback(t);
        
        return expression(ts);
    }
}

//------------------------------------------------------------------------------

void clean_up_mess()
{
    ts.ignore(print);
}

//------------------------------------------------------------------------------

void calculate()
{
    while (cin)
        try {
        cout << prompt;
        Token t = ts.get();
        while (t.kind == print) t = ts.get();    // first discard all "prints"
        if (t.kind == quit) return;        // quit
        ts.putback(t);
       
        if (Roman_num == true) {
            Roman_int r(statement(ts)); cout << result<< r; Roman_num = false;
        }
        else cout<< result << statement(ts) << endl;
    }
    catch (exception& e) {
        cerr << e.what() << endl;        // write error message
        clean_up_mess();
    }
}

//------------------------------------------------------------------------------

int main()
try {
    // predefine names:
    tss.define("pi", 3.1415926535, false);	// these pre-defiend names are constants
    tss.define("e", 2.7182818284, false);

    calculate();

    keep_window_open();    // cope with Windows console mode
    return 0;
}
catch (exception& e) {
    cerr << e.what() << endl;
    keep_window_open("~~");
    return 1;
}
catch (...) {
    cerr << "exception \n";
    keep_window_open("~~");
    return 2;
}
