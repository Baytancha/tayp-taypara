#include "std_lib_facilities.h" 

void end_of_loop(istream& ist, char term, const string& message)
{
    if (ist.fail()) { // use term as terminator and/or separator
        ist.clear();
        char ch;
        if (ist >> ch && ch == term) return; // all is fine
        error(message);
    }
}

struct Point {

    int x;
    int y;

};
istream& operator>>(istream& is, Point& p)
{
    char c1;
    if (is >> c1 && c1 != '(') {
        is.unget();
        is.clear(ios_base::failbit);
        return is;
    }

   
    char c2;
    int x;
    int y;
    is >> x >> y >> c2;
    if (!is || c2 != ')') {
        if (is.eof()) return is;
        error("wrong input");
    }
    p.x = x;
    p.y = y;
    return is;
}

ostream& operator<<(ostream& os, Point& p)
{
    return os << '(' << p.x << " " << p.y << ')';
}









int main()
try {

    cout << "Enter seven 'x,y' pairs\n";
    vector<Point> original_points;
    for (Point p; cin >> p; )
        original_points.push_back(p);


    ofstream ost{ "mydata.txt" };
    if (!ost) error("can't open output file ", "mydata.txt");

    cout << "Print the data:\n";

    for (Point p : original_points)
        ost << '(' << p.x << ' ' << p.y << ")\n";

    ost.close();

    ifstream post{ "mydata.txt" }; 
    if (!post) error("can't open output file ", "mydata.txt");
    post.exceptions(post.exceptions() | ios_base::badbit);

    vector<Point> processed_points;
    for (Point p; post >> p; )
        processed_points.push_back(p);

    for (Point p : processed_points)
        cout << '(' << p.x << ' ' << p.y << ")\n";
 
    

  
    




}



catch (exception& e) {
    cerr << e.what();
}
catch (...) {
    cerr << "unknown exception";
}
