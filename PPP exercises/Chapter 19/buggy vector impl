#include <string>
#include <iostream>
#include <memory>
#include <stdexcept>
#include <vector>
#include <cmath>
#include <algorithm>
#include <list>
#include <array>


void vector::reserve(int newalloc)
{
    if (newalloc <= space) return;             // never decrease allocation
    double* p = new double[newalloc];        // allocate new space
    for (int i = 0; i < sz; ++i) p[i] = elem[i]; // copy old elements
    delete[] elem;                          // deallocate old space
    elem = p;
    space = newalloc;
}




void vector::resize(int newsize)
// make the vector have newsize elements
// initialize each new elements with the default value 0.0
{
    reserve(newsize);
    for (int i = sz; i < newsize; ++i) elem[i] = 0;    // initialize new elements 
    sz = newsize;
}




void vector::push_back(double d)
// increase vector size by one; initialize the new element with d
{
    // no more free space: get more
    if (space == 0)
        reserve(8);
    else
        if (space == sz)
            reserve(2 * space);

    elem[sz] = d;    // add d at end
    ++sz;            // increase the size (sz is the number of elements)
}


vector& vector::operator=(const vector& a)
// like copy constructor, but we must deal with old elements
{
    double* p = new double[a.sz];  // allocate new space
    for (int i = 0; i < a.sz; ++i) p[i] = a.elem[i];    // copy elements
    delete[] elem;                // deallocate old space
    space = sz = a.sz;             // set new size
    elem = p;                      // set new elements
    return *this;                  // return self-reference
}



vector& vector::operator=(const vector& a)
{
    if (this == &a) return *this;    // self-assignment, no work needed

    if (a.sz <= space) {             // enough space, no need for new allocation
        for (int i = 0; i < a.sz; ++i) elem[i] = a.elem[i]; // copy elements
        sz = a.sz;
        return *this;
    }

    double* p = new double[a.sz];  // allocate new space
    for (int i = 0; i < a.sz; ++i) p[i] = a.elem[i];    // copy elements
    delete[] elem;                // deallocate old space
    space = sz = a.sz;             // set new size
    elem = p;                      // set new elements
    return *this;                  //  return a self-reference
}




//summation

// an almost real vector of doubles:
class vector {
    /*
    invariant:
        for 0<=n<sz elem[n] is element n
        sz<=space;
        if sz<space there is space for (space-sz) doubles after elem[sz-1]
    */
    int sz;           // the size
    double* elem;     // pointer to the elements (or 0)
    int space;        // number of element plus number of free slots
public:
    vector() : sz(0), elem(0), space(0) { }
    vector(int s) :sz(s), elem(new double[s]), space(s)
    {
        for (int i = 0; i < sz; ++i) elem[i] = 0;    // elements are initialized
    }

    vector(const vector&);            // copy constructor
    vector& operator=(const vector&); // copy assignment

    vector(vector&&); // move constructor
    vector& operator=(vector&&); // move assignmen

    ~vector() { delete[] elem; }     // destructor

    double& operator[ ](int n) { return elem[n]; } // access
    const double& operator[ ](int n) const { return elem[n]; }

    int size() const { return sz; }
    int capacity() const { return space; }

    void resize(int newsize);         // growth
    void push_back(double d);
    void reserve(int newalloc);
};

//------------------------------------------------------------------------------
vector::vector(vector&& a)
    :sz{ a.sz }, elem{ a.elem } // copy a’s elem and sz
{
    a.sz = 0; // make a the empty vector
    a.elem = nullptr;
}
vector& vector::operator=(vector&& a) // move a to this vector
{
    delete[] elem; // deallocate old space
    elem = a.elem; // copy a’s elem and sz
    sz = a.sz;
    a.elem = nullptr; // make a the empty vector
    a.sz = 0;
    return *this; // return a self-reference (see §17.10)
}


//-----------------------------------------------------------------------------

void vector::reserve(int newalloc)
{
    if (newalloc <= space) return;             // never decrease allocation
    double* p = new double[newalloc];        // allocate new space
    for (int i = 0; i < sz; ++i) p[i] = elem[i]; // copy old elements
    delete[] elem;                          // deallocate old space
    elem = p;
    space = newalloc;
}

//------------------------------------------------------------------------------

void vector::resize(int newsize)
// make the vector have newsize elements
// initialize each new elements with the default value 0.0
{
    reserve(newsize);
    for (int i = sz; i < newsize; ++i) elem[i] = 0;    // initialize new elements 
    sz = newsize;
}

//------------------------------------------------------------------------------

void vector::push_back(double d)
// increase vector size by one; initialize the new element with d
{
    // no more free space: get more
    if (space == 0)
        reserve(8);
    else
        if (space == sz)
            reserve(2 * space);

    elem[sz] = d;    // add d at end
    ++sz;            // increase the size (sz is the number of elements)
}

//------------------------------------------------------------------------------

vector& vector::operator=(const vector& a)
{
    if (this == &a) return *this;    // self-assignment, no work needed

    if (a.sz <= space) {             // enough space, no need for new allocation
        for (int i = 0; i < a.sz; ++i) elem[i] = a.elem[i]; // copy elements
        sz = a.sz;
        return *this;
    }

    double* p = new double[a.sz];  // allocate new space
    for (int i = 0; i < a.sz; ++i) p[i] = a.elem[i];    // copy elements
    delete[] elem;                // deallocate old space
    space = sz = a.sz;             // set new size
    elem = p;                      // set new elements
    return *this;                  //  return a self-reference
}


////////////////////////////////////////////////////////////////////////////
//TEMPLATE VERSION


template<class T> class vector {      // read "for all types T" (just like in math)
    int sz;                           // the size
    T* elem;                          // a pointer to the elements
    int space;                        // size+free_space
public:
    vector() : sz(0), elem(0), space(0) { }
    vector(int s);

    vector(const vector&);            // copy constructor
    vector& operator=(const vector&); // copy assignment

    ~vector() { delete[] elem; }     // destructor

    T& operator[ ] (int n) { return elem[n]; } // access: return reference
    const T& operator[ ] (int n) const { return elem[n]; }

    int size() const { return sz; }   // the current size
    int capacity() const { return space; }

    void resize(int newsize);         // growth
    void push_back(const T& d);
    void reserve(int newalloc);
};





///////////////INTEGERS AS TEMPLATE PARAMETERS/////////////////////////////////////////////////

template<class T, int N> struct array {
    T elem[N];                  // hold elements in member array

    // rely on the default constructors, destructor, and assignment

    T& operator[ ] (int n) { return elem[n]; } // access: return reference
    const T& operator[ ] (int n) const { return elem[n]; }

    T* data() { return elem; }  // conversion to T*
    const T* data() const { return elem; }

    int size() const { return N; }
};

//------------------------------------------------------------------------------

array<int, 256> gb;          // 256 integers
array<double, 6> ad = { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 };    // note the initializer!
const int max = 1024;

void some_fct(int n)
{
    array<char, max> loc;
    //array<char,n> oops;         // error: the value of n not known to compiler
    // ...
    array<char, max> loc2 = loc; // take backup copy
    // ...
    loc = loc2;                 // restore
    // ...
}

//------------------------------------------------------------------------------

template<class C> void printout(const C& c)
{
    for (int i = 0; i < c.size(); ++i) cout << c[i] << '\n';
}


void f()
{
    fill(buf, 'x');      // for fill(), T is char and N is 1024
    // because that's what buf has
    fill(b2, 0.0);        // for fill(), T is double and N is 10
    // because that's what b2 has
}



///TEMPLATE UPDATED
//////////////////////////////////////////////////////////////////

template<class T> class vector {      // read "for all types T" (just like in math)
    int sz;                           // the size
    T* elem;                          // a pointer to the elements
    int space;                        // size+free_space
public:
    vector() : sz(0), elem(0), space(0) { }
    vector(int s);

    vector(const vector&);            // copy constructor
    vector& operator=(const vector&); // copy assignment

    ~vector() { delete[] elem; }     // destructor

    T& operator[ ] (int n) { return elem[n]; } // access: return reference
    const T& operator[ ] (int n) const { return elem[n]; }

    int size() const { return sz; }   // the current size
    int capacity() const { return space; }

    void resize(int newsize, T def = T()); // growth
    void push_back(const T& d);
    void reserve(int newalloc);
};

//------------------------------------------------------------------------------

struct No_default {
    No_default(int);               // the only constructor for No_default
    // ...
};

vector<double> v1;
v1.resize(100); // add 100 copies of double(), that is, 0.0
v1.resize(200, 0.0); // add 100 copies of 0.0 — mentioning 0.0 is redundant
v1.resize(300, 1.0); // add 100 copies of 1.0
struct No_default {
    No_default(int); // the only constructor for No_default
    // . . .
};
vector<No_default> v2(10); // error: tries to make 10 No_default()s
vector<No_default> v3;
v3.resize(100, No_default(2)); // add 100 copies of No_default(2)
v3.resize(200); // error: tries to add 100 No_default()s





//TEMPLATE UPD2

/////////////////////////////////////////////////////////////////////////////
template<class T> class allocator {
public:
    // ...
    T* allocate(int n);            // allocate space for n objects of type T
    void deallocate(T* p, int n);  // deallocate n objects of type T starting at p

    void construct(T* p, const T& v); // construct a T with the value v in p
    void destroy(T* p);            // destroy the T in p
};

//------------------------------------------------------------------------------

template<class T, class A = allocator<T> > class vector {
    A alloc;    // use allocate to handle memory for elements
    int sz;     // the size
    T* elem;    // a pointer to the elements
    int space;  // size+free_space
public:
    vector() : sz(0), elem(0), space(0) { }
    vector(int s);
    vector(const vector&);            // copy constructor
    vector& operator=(const vector&); // copy assignment
    ~vector() { delete[] elem; }     // destructor

    void resize(int newsize, T def = T()); // growth
    void push_back(const T& d);
    void reserve(int newalloc);
};

//------------------------------------------------------------------------------

template<class T, class A>
void vector<T, A>::reserve(int newalloc)
{
    if (newalloc <= space) return;     // never decrease allocation
    T* p = alloc.allocate(newalloc); // allocate new space
    for (int i = 0; i < sz; ++i) alloc.construct(&p[i], elem[i]); // copy
    for (int i = 0; i < sz; ++i) alloc.destroy(&elem[i]);        // destroy
    alloc.deallocate(elem, space);    // deallocate old space
    elem = p;
    space = newalloc;
}

//------------------------------------------------------------------------------

template<class T, class A>
void vector<T, A>::push_back(const T& val)
{
    // no more free space: get more
    if (space == 0)
        reserve(8);
    else
        if (space == sz)
            reserve(2 * space);

    alloc.construct(&elem[sz], val);  // add val at end
    ++sz;                            // increase the size
}

//------------------------------------------------------------------------------

template<class T, class A>
void vector<T, A>::resize(int newsize, T val)
{
    reserve(newsize);
    for (int i = sz; i < newsize; ++i) alloc.construct(&elem[i], val); // construct
    for (int i = newsize; i < sz; ++i) alloc.destroy(&elem[i]); // destroy
    sz = newsize;
}

//------------------------------------------------------------------------------

struct No_default {
    No_default(int);               // the only constructor for No_default
    // ...
};





//TEMPLATE UPD3
///////////////////////////////////////////////////

template<class T> class allocator {
public:
    // ...
    T* allocate(int n);            // allocate space for n objects of type T
    void deallocate(T* p, int n);  // deallocate n objects of type T starting at p

    void construct(T* p, const T& v); // construct a T with the value v in p
    void destroy(T* p);            // destroy the T in p
};

//------------------------------------------------------------------------------

template<class T, class A = allocator<T> > class vector {
    A alloc;                       // use allocate to handle memory for elements
    int sz;                        // the size
    T* elem;                       // a pointer to the elements
    int space;                     // size+free_space
public:
    vector() : sz(0), elem(0), space(0) { }
    vector(int s);

    vector(const vector&);            // copy constructor
    vector& operator=(const vector&); // copy assignment

    ~vector() { delete[] elem; }     // destructor

    T& operator[ ] (int n);           // access: return reference
    const T& operator[ ] (int n) const;

    int size() const { return sz; }   // the current size
    int capacity() const { return space; }
};

//------------------------------------------------------------------------------

template<class T, class A> T& vector<T, A>::operator[ ](int n)
{
    return elem[n];
}



///////////
template<class T> class allocator {
public:
    // ...
    T* allocate(int n);            // allocate space for n objects of type T
    void deallocate(T* p, int n);  // deallocate n objects of type T starting at p

    void construct(T* p, const T& v); // construct a T with the value v in p
    void destroy(T* p);            // destroy the T in p
};

//------------------------------------------------------------------------------

struct out_of_range { /* ... */ }; // class used to report range access errors

template<class T, class A = allocator<T> > class vector {
    A alloc;                       // use allocate to handle memory for elements
    int sz;                        // the size
    T* elem;                       // a pointer to the elements
    int space;                     // size+free_space
public:
    vector() : sz(0), elem(0), space(0) { }
    vector(int s);

    vector(const vector&);            // copy constructor
    vector& operator=(const vector&); // copy assignment

    ~vector() { delete[] elem; }     // destructor

    T& at(int n);                     // checked access    
    const T& at(int n) const;         // checked access

    T& operator[ ](int n);            // unchecked access
    const T& operator[ ](int n) const;// unchecked access

    int size() const { return sz; }   // the current size
    int capacity() const { return space; }
};

//------------------------------------------------------------------------------

template<class T, class A >  T& vector<T, A>::at(int n)
{
    if (n < 0 || sz <= n) throw out_of_range();
    return elem[n];
}

//------------------------------------------------------------------------------

template<class T, class A >  T& vector<T, A>::operator[ ](int n) // as before
{
    return elem[n];
}

//------------------------------------------------------------------------------

void print_some(vector<int>& v)
{
    int i = -1;
    cin >> i;
    while (i != -1) try {
        cout << "v[" << i << "]==" << v.at(i) << "\n";
    }
    catch (out_of_range) {
        cout << "bad index: " << i << "\n";
    }
}






//TEMPLATE UPD4
///////////////////////////
struct out_of_range
{
    out_of_range(const std::string& error_message) {}
};

//------------------------------------------------------------------------------

struct Range_error : out_of_range { // enhanced vector range error reporting
    int index;
    Range_error(int i) :out_of_range("Range error"), index(i) { }
};

//------------------------------------------------------------------------------

template<class T> struct Vector : public std::vector<T> {
    typedef typename std::vector<T>::size_type size_type;

    Vector() { }
    Vector(size_type n) :std::vector<T>(n) {}
    Vector(size_type n, const T& v) :std::vector<T>(n, v) {}

    T& operator[](unsigned int i) // rather than return at(i);
    {
        if (i < 0 || this->size() <= i) throw Range_error(i);
        return std::vector<T>::operator[](i);
    }

    const T& operator[](unsigned int i) const
    {
        if (i < 0 || this->size() <= i) throw Range_error(i);
        return std::vector<T>::operator[](i);
    }
};



//TEMPLATE UPD5
///////////////////////////////////////

template<class T> class allocator {
public:
    // ...
    T* allocate(int n);            // allocate space for n objects of type T
    void deallocate(T* p, int n);  // deallocate n objects of type T starting at p

    void construct(T* p, const T& v); // construct a T with the value v in p
    void destroy(T* p);            // destroy the T in p
};

//------------------------------------------------------------------------------

template<class T, class A = allocator<T> > class vector {
    A alloc;                       // use allocate to handle memory for elements
    int sz;                        // the size
    T* elem;                       // a pointer to the elements
    int space;                     // size+free_space
public:
    vector() : sz(0), elem(0), space(0) { }
    vector(int s);

    vector(const vector&);            // copy constructor
    vector& operator=(const vector&); // copy assignment

    ~vector() { delete[] elem; }     // destructor

    // ...
    void reserve(int newalloc);
};

//------------------------------------------------------------------------------

template<class T, class A>
void vector<T, A>::reserve(int newalloc)
{
    if (newalloc <= space) return;        // never decrease allocation
    T* p = alloc.allocate(newalloc);    // allocate new space
    for (int i = 0; i < sz; ++i) alloc.construct(&p[i], elem[i]); // copy
    for (int i = 0; i < sz; ++i) alloc.destroy(&elem[i]);        // destroy
    alloc.deallocate(elem, space);       // deallocate old space
    elem = p;
    space = newalloc;
}


template<class T> class allocator {
public:
    // ...
    T* allocate(int n);                 // allocate space for n objects of type T
    void deallocate(T* p, int n);       // deallocate n objects of type T starting at p

    void construct(T* p, const T& v);   // construct a T with the value v in p
    void destroy(T* p);                 // destroy the T in p
};

//------------------------------------------------------------------------------

template<class T, class A>
struct vector_base {
    A alloc;                            // allocator
    T* elem;                            // start of allocation
    int sz;                             // number of elements
    int space;                          // amount of allocated space

    vector_base(const A& a, int n)
        : alloc(a), elem(a.allocate(n)), sz(n), space(n) { }
    ~vector_base() { alloc.deallocate(elem, space); }
};

//------------------------------------------------------------------------------

template<class T, class A>
void swap(vector_base<T, A>& a, vector_base<T, A>& b);

//------------------------------------------------------------------------------

template<class T, class A = allocator<T> >
class vector : private vector_base<T, A> {
public:
    // ...
    void reserve(int newalloc);
};

//------------------------------------------------------------------------------

template<class T, class A>
void vector<T, A>::reserve(int newalloc)
{
    if (newalloc <= this->space) return;  // never decrease allocation
    vector_base<T, A> b(this->alloc, newalloc); // allocate new space
    for (int i = 0; i < this->sz; ++i) this->alloc.construct(&b.elem[i], this->elem[i]); // copy
    for (int i = 0; i < this->sz; ++i) this->alloc.destroy(&this->elem[i]); // destroy old 
    swap< vector_base<T, A> >(*this, b);  // swap representations
}



template<typename T, typename A>
void vector<T, A>::reserve(int newalloc)
{
    if (newalloc <= this– > space) return; // never decrease allocation
    vector_base<T, A> b(this– > alloc, newalloc); // allocate new space
    uninitialized_copy(this->elem, this->elem + this->sz, b.elem); //uninitialized_copy(b.elem, &b.elem[this– > sz], this– > elem); // copy
    for (int i = 0; i<this–>sz; ++i)
        this– > alloc.destroy(&this– > elem[i]); // destroy old
    swap<vector_base<T, A>>(*this, b); // swap representations
}





////////////////////////////////////

















