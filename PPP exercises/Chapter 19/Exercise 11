template<typename T>
class Counted_ptr {
public:
    constexpr Counted_ptr() = default;

    explicit Counted_ptr(T* ptr) : _resource{ ptr }

    {
        ++*_counter;
    }

    Counted_ptr(const Counted_ptr<T>& other) : _resource{ other._resource }, _counter{ other._counter }

    {
        ++*_counter;
    }

    Counted_ptr& operator=(const Counted_ptr<T>& other) { 
        
        if (_resource == other._resource) return *this;

        if (*_counter == 1) {
            delete _resource;
            delete _counter;
        }
        else --*_counter;
        _resource = other._resource;
        _counter = other._counter;
        ++*_counter;
        return *this;
          
    };

    Counted_ptr(Counted_ptr&& other)  noexcept : _resource{ other._resource }, _counter{ other._counter }

    {
        other._resource = nullptr;
        other._counter = nullptr;
    }
    

    Counted_ptr& operator=(Counted_ptr&& other)  noexcept
    {
        if (_resource == other._resource) {
            _resource = other._resource;
            _counter = other._counter;
            --*_counter;
            other._resource = nullptr;
            other._counter = nullptr;
            return *this;
        }
        if (*_counter == 1) {
            delete _resource;
            delete _counter;
        }
        else --* _counter;
        _resource = other._resource;
        _counter = other._counter;
        return *this;
    }


    ~Counted_ptr() noexcept {

        if (_resource) {
            --* _counter;
            if (*_counter == 0)
            {
                delete _resource;
                delete _counter;
            }
        }
    }

    int use_count() const noexcept { if (_counter) return *_counter; else return 0; }
    void reset()  noexcept { _resource = nullptr; *_counter = 0; }
    void reset(T* ptr)  noexcept { _resource = ptr; *_counter = 0; ++* _counter; }
    bool unique() const noexcept { return use_count() == 1; }

    T* operator->() const noexcept {
        if (_resource)
        return _resource;
    }

    T& operator* () const noexcept {
        if (_resource)
        return *_resource;
    }

    T* get() const noexcept { return _resource; }

    explicit operator bool() const noexcept {

        return _resource ? true : false; 
    }

private:
    T* _resource{ nullptr };
    int* _counter = new int(0);
  
};

void check2(Counted_ptr<int> pp) {

    std::cout << "local 2 " << pp.use_count() << '\n';

    
}

void check(Counted_ptr<int> pp) {

    std::cout << "local 1 " << pp.use_count() << '\n';

    check2(pp);
}


int main()
try {

   
    Counted_ptr<int> ptr1;
    std::cout << ptr1.use_count() << '\n';
    ptr1.reset();
    ptr1.reset(new int(10));
    Counted_ptr<int> ptr1_1 = ptr1;
    Counted_ptr<int> ptr1_2 = ptr1;
    Counted_ptr<int> ptr1_3 = ptr1;
    Counted_ptr<int> ptr1_4 = ptr1;
    Counted_ptr<int> ptr1_5 = ptr1;
    std::cout << ptr1.use_count() << '\n';
    std::cout << std::boolalpha << ptr1.unique() << '\n';
    Counted_ptr<int> ptr2(new int(20));
    Counted_ptr<int> ptr3 = ptr2;
    std::cout << ptr2.use_count() << '\n';
    std::cout << std::boolalpha << ptr2.unique() << '\n';

    ptr1 = ptr2;
    ptr1 = ptr1;
    std::cout << ptr1.use_count() << '\n';
    std::cout << ptr1_1.use_count() << '\n';

    Counted_ptr<int> ptr4 = std::move(ptr3);
    std::cout << ptr4.use_count() << '\n';
    std::cout << ptr3.use_count() << '\n';

    ptr2 = std::move(ptr4);
    std::cout << ptr4.use_count() << '\n';
    std::cout << ptr2.use_count() << '\n';

    check(ptr2);


return 0;
}
catch (std::exception& e) {
	std::cerr << e.what() << '\n';
}
catch (...) {
	std::cerr << "something bad happened\n";
}











