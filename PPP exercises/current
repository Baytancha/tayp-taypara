#include "std_lib_facilities.h"

class Date {
public:
    class Invalid { };
    Date(int yy, int mm, int dd); // constructor // note: member initializers               
    void add_day(int n); // increase the Date by n days
    int month() { return m; }
    int day() { return d; }
    int year() { return y; }
private: 
    int y, m, d; // year, month, day
    bool is_valid();
};

Date::Date(int yy, int mm, int dd) // constructor
    :y{ yy }, m{ mm }, d{ dd } 

{        // note: member initializers
    if (!is_valid()) throw Invalid{};
}


bool Date::is_valid() // return true if date is valid
{
    if (m < 1 || 12 < m) return false;
    // . . .
}

Date y{ 10, 8, 30 };

void init_day(Date& dd, int y, int m, int d)
{
    // check that (y,m,d) is a valid date
    // if it is, use it to initialize dd
}

void add_day(Date& dd, int n)
{
    // increase dd by n days
}

void f()
try {
    Date birthday{ 1970, 10, 30 }; // OK

    cout << birthday.month() << ' ' << y.month() << '\n';
}

catch (Date::Invalid) {
    error("invalid date"); // error() defined in ยง5.6.3
}


int main()
try {  
    
    f();


    keep_window_open();    
    return 0;
}

catch (exception& e) {
    cerr << e.what() << endl;
    keep_window_open("~~");
    return 1;
}


catch (...) {
    cerr << "exception \n";
    keep_window_open("~~");
    return 2;
}









