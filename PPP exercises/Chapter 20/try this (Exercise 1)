double* get_from_jack(int* count)
{
   
    if (!count)
        return 0;

    const int n = 10;
     if (n < 0) return nullptr;

    double* arr = new double[n];

    if (arr)
    {
        *count = n;

        for (int i = 0; i < n; ++i)
            arr[i] = i;
    }

    return arr;
}

//------------------------------------------------------------------------------

std::vector<double>* get_from_jill()
{
    const int n = 10;

    std::vector<double>* arr = new std::vector<double>(n);

    if (arr)
    {
        for (int i = 0; i < n; ++i)
            (*arr)[i] = i;
    }

    return arr;
}

void fct3()
{
    int jack_count = 0;
    double* jack_data = get_from_jack(&jack_count);
    vector<double>* jill_data = get_from_jill();            //if we get zero evalues at some iterations of the loop
    //we need to account for that
    double* jack_high = nullptr;
    double* jill_high = nullptr;
    if (jack_data) jack_high = high(jack_data, jack_data + jack_count); else { std::cout << "EMPTY\n"; return; }

    vector<double>& v = *jill_data;
    if (v.size() > 0) jill_high = high(&v[0], &v[0] + v.size()); else { std::cout << "EMPTY\n"; return; }


    if (jack_high && jill_high) //check for null 
        cout << "Jill's high " << *jill_high << "; Jack's high " << *jack_high;


    double* middle = &v[0] + v.size() / 2;   // WE CAN VARY SEARCH AREA BY POINTER ARITHMETIC 
    double* high1 = high(&v[0], middle);          // max of first half
    double* high2 = high(middle, &v[0] + v.size()); // max of second half

    cout << "\nmax of first half: " << *high1
        << "\nmax of second half: " << *high2;


    delete[] jack_data;
    delete jill_data;
}

/////////////////////////////////////////////////////////////////////

template<class T, class A>
void vector<T, A>::push_front(const T& val)
{
    if (space == 0) {
        reserve(8);
    }
    else
        if (space == sz) {
            reserve(2 * space);
        }

	for (int i = sz; i > 0; --i) alloc.construct(&elem[i], elem[i - 1]); // using alloc because we can't assign elem[sz-1] to uninitialized memory
    alloc.construct(&elem[0], val);  // construct in case we adding first element
    ++sz;                            // increase the size
}


//////////////////////////////////////////////////////////////////////////
template<class Iter> Iter advance(Iter p, int n)
{
    if (n > 0) while (n > 0){ ++p; --n; }    // go forwards
    else if (n < 0) while (n < 0) { --p; ++n; }
    return p;
}
//////////////////////////////////////////////////////////////////////////
template<typename Iter>
void prnt(Iter begin, Iter end) {

    int count{ 0 };
    for (Iter p = begin; p != end; ++p)
        ++count;

    std::cout << "TOTAL COUNT OF CHARACTERS: " << count << "\n";

    for (Iter p = begin; p != end; ++p)
        std::cout << *p;
    std::cout<< "\n";

    char* howdy = new char[count]{'H', 'o', 'w', 'd', 'y'};
    
    for (int i = 0; i < count; ++i) {
        if (*begin > *howdy) std::cout << "arg is greater than howdy\n";
        else std::cout << "howdy is greater than arg\n";
        ++begin;
        ++howdy;
    }
}


template<typename T>
void pass(T arg) {

    int count{ 0 };
    for (auto p = arg.begin(); p != arg.end(); ++p)
        ++count;

    std::cout << "TOTAL COUNT OF CHARACTERS: " << count << "\n";

    for (auto p = arg.begin(); p != arg.end(); ++p)
        std::cout << *p;
    std::cout << "\n";

    T howdy = { 'H', 'o', 'w', 'd', 'y' };

    if (arg > howdy) std::cout << "arg is greater than howdy\n";
    else std::cout << "howdy is greater than arg\n";

    T arg2 = arg;  

}

int main()
try {

    char s1[] = { "Hello" };
    string s2 = { "Hello" };
	vector<char> s3 = { 'H', 'e', 'l', 'l', 'o' }; 
	list<char> s4 = { 'H', 'e', 'l', 'l', 'o' }; 


    prnt(s1, s1 + 6);
    /*prnt(s2.begin(), s2.end());
    prnt(s3.begin(), s3.end());
    prnt(s4.begin(), s4.end());*/

    //pass(s1);
    pass(s2);
    pass(s3);
    pass(s4);


    vector<int> i1 = { 1, 2, 3, 4, 5 };
    list<int> i2 = { 1, 2, 3, 4, 5 };
    int i3[] = {1, 2, 3, 4, 5};

}



