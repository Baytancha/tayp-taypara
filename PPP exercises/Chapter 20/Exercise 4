template<class Iterator >
Iterator high(Iterator first, Iterator last)
// return an iterator to the element in [first,last) that has the highest value
{
    Iterator high = first;
    for (Iterator p = first; p != last; ++p)
        if (*high < *p) high = p;
    return high;
}

double* get_from_jack(int* count)
{
    std::fstream jack;

    jack.open("get_jack.txt", std::ios::in );
    if (!jack)  return nullptr; 

    if (!count)
        return 0;

    const int n = 10;
    *count = n;

    if (n < 0) return nullptr;

    double* arr = new double[n];
    double* t = arr;

    for (int i = 0; i < n; ++i) {
        double n = 0;
        jack >> n;
        *t = n;
        ++t;
    }
    return arr;
}

//------------------------------------------------------------------------------

std::vector<double>* get_from_jill()
{
    std::fstream jill;

    jill.open("get_jill.txt", std::ios::in );
    if (!jill) return nullptr; 

    const int n = 10;

    std::vector<double>* arr = new std::vector<double>(n);
    auto iter = arr->begin();

    for (int i = 0; i < n; ++i) {
        double r = 0;
        jill >> r;
        *iter = r;
        ++iter;
    }
    return arr;
}

//template<typename Iter>
//Iter high(Iter first, Iter last)
//{
//    Iter high = first;
//    for (Iter p = first; p != last; ++p) // we interate through elements by incrementing p because we deal with contiguous blocks of memory
//        if (*high < *p) high = p; 
//    return high;
//}


double* find_highest(vector<double>& v) //returnr ptr to the highest element
{
    double h = -1;
    double* high = nullptr;
    for (int i = 0; i < v.size(); ++i)
        if (h < v[i]) high = &v[i];
    return high;
}


void fct3()
{
    int jack_count = 0;
    double* jack_data = get_from_jack(&jack_count);
    vector<double>* jill_data = get_from_jill();   //if we get zero evalues at some iterations of the loop
    //we need to account for that
    
    if (!jack_data && !jill_data) { cout << "EMPTY\n"; return; }

    double* jack_high = nullptr;
    double* jill_high = nullptr;
    if (jack_data) jack_high = high(jack_data, jack_data + jack_count); 
    vector<double>& v = *jill_data;
    if (jill_data) jill_high = high(&v[0], &v[0] + v.size()); 

    if (jill_data) {
        for (auto v : *jill_data)
            cout << v << " ";
        cout << "\n";
    }

    if (jack_data) {
        for (int i = 0; i < jack_count; ++i)
            cout << jack_data[i] << " ";
        cout << "\n";
    }

    if (jill_high && jack_high) //check for null 
        cout << "Jill's high " << *jill_high << "\nJack's high " << *jack_high;

    if (jill_high) {
        double* middle = &v[0] + v.size() / 2;   // WE CAN VARY SEARCH AREA BY POINTER ARITHMETIC 
        double* high1 = high(&v[0], middle);          // max of first half
        double* high2 = high(middle, &v[0] + v.size()); // max of second half
        cout << "\nmax of Jill's first half: " << *high1
            << "\nmax of Jill's second half: " << *high2;
    }
    delete[] jack_data;
    delete jill_data;
}


int main()
try {

  
    fct3();
}
