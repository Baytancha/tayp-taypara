using Line = std::vector<char>;
//------------------------------------------------------------------------------

struct Document {

    std::list<Line> line; // a list of vector of chars 

    class Text_iterator { // keep track of line and character position within a line
        std::list<Line>::iterator ln;
        Line::iterator pos;
        size_t No;
    public:
        typedef std::forward_iterator_tag iterator_category;
        typedef char value_type;
        typedef size_t difference_type;
        typedef char* pointer;
        typedef char& reference;

        // start the iterator at line ll's character position pp:
        Text_iterator(std::list<Line>::iterator ll, Line::iterator pp)
            :ln(ll), pos(pp), No(1) { }

        Text_iterator(std::list<Line>::iterator ll, Line::iterator pp, size_t n) 
            :ln(ll), pos(pp), No(n) { }
        // a second ctor incase we want to specify line

		Text_iterator() = default;

        reference operator*() { return *pos; }
        size_t line_number() const { return No; }
		Line::iterator get_line_iter() const { return pos; }
		std::list<Line>::iterator get_list_iter() const { return ln; }

        Text_iterator& operator++();
        Text_iterator& operator--();
        Text_iterator& operator+=(const Text_iterator& other);
        bool operator==(const Text_iterator& other) const;
        bool operator!=(const Text_iterator& other) const { return !(*this == other); }
        Text_iterator operator+(int x);
        Text_iterator operator-(int x);
    };

    Document() { line.push_back(Line()); }// push empty line whose begin() == end()
    Text_iterator begin()      // first character of first line
    {
        return Text_iterator(line.begin(), line.begin()->begin());
    }
    Text_iterator end()        // one beyond the last line
    {
        std::list<Line>::iterator last = line.end();
        --last; //backtrack from the one_beyond_link

        //std::cout << *(last->end() - 1);
     
       return Text_iterator(last, last->end()); 
       //last->end() returns the one_beyond_last char,for an empty line it's equal to begin()

    }

    Line& get_line(size_t n) { std::list<Line>::iterator p = line.begin(); p = advance(p, n-1); return *p; }

    template<class Iter> 
    Iter advance(Iter p, int n);

    void print();

    Text_iterator find_text(const std::string& s);

    void erase_line(int n);

    bool match(Text_iterator first, Text_iterator second, const std::string& s);

    Text_iterator find_replace(const std::string& f, const std::string& r);

    int count_char();
    int word_count_ws();
    int word_count_al();
};

std::istream& operator>>(std::istream& is, Document& d)
{
    char ch;
    while (is.get(ch)) {
        //std::cout << "\nPUSHED\n";
        d.line.back().push_back(ch);    // add the character
        if (ch == '\n') {
            //std::cout << "\nLINE\n";
            d.line.push_back(Line());   // add another line
        }
    }
    if (d.line.back().size()) { //std::cout << "\nFINAL LINE\n"; 
    d.line.push_back(Line{}); } //to avoid invalid dereference when incrementing
    //else std::cout << "\nEMPTY LINE\n";
    return is;
}


template<class Iter> 
Iter Document::advance(Iter p, int n)
{
    if (n > 0) while (n > 0) { ++p; --n; }    // go forwards
    else if (n < 0) while (n < 0) { --p; ++n; }
    return p;
}


void Document::print() 
{ 
    for (Document::Text_iterator p = this->begin(); p != this->end(); ++p) std::cout << *p; 
}



void Document::erase_line(int n)
{

    if (n < 0 || this->line.size() <= n) return;    // ignore out-of-range lines
    this->line.erase(advance(this->line.begin(), n)); // returns a List iterator
}

//------------------------------------------------------------------------------

bool Document::match(Text_iterator first, Text_iterator last, const std::string& s)
{
    //std::cout << "WW'RE IN\n";

    std::string::const_iterator p;

    /*for (p = s.begin();
        p != s.end() && first != last && *p == *first;
        ++p, ++first)
    {
    }*/

    for (p = s.begin(); p != s.end() && first != last; ++p)
    {
        if (*p != *first) break;
        ++first;
        //std::cout << "match\n";
    }

    //std::cout << " STOPPED AT: " << *first << "\n";

    return p == s.end(); // if we reached end of string, we matched it all
}
//------------------------------------------------------------------------------

Document::Text_iterator Document::find_text(const std::string& s)
{
    Document::Text_iterator first = this->begin();
    Document::Text_iterator last = this->end();

    if (s.size() == 0) return last;    // can't find an empty string
    char first_char = s[0];
    while (true) {
        //std::cout << "current iter " << *first << "\n";
        Document::Text_iterator p = std::find(first, last, first_char);
        //std::cout << "find result " << *p << "\n";
        if (p == last || match(p, last, s)) return p;
		//std::cout <<" Before ++"<< * p << "\n";
        ++p; first = p;
        //std::cout << " After ++"<< *first << "\n";
    }
}
//------------------------------------------------------------------------------

//Document::Text_iterator Document::find_replace(const std::string& f, const std::string& r)
//{
//    Document::Text_iterator first = this->begin();
//    Document::Text_iterator last = this->end();
//    
//    if (f.size() == 0) return last;    // can't find an empty string
//    char first_char = f[0];
//    while (true) {
//
//        Document::Text_iterator p = std::find(first, last, first_char);
//        if (p == last) return p; 
//        if (match(p, last, f)) {
//            first = p;
//
//            std::cout << first.line_number() << "\n";
//            std::cout << *first.get_line_iter() << "\n";
//            Line& cc = get_line(first.line_number());
//
//            cc.insert(first.get_line_iter(), r[0]);
//
//            for (char t : cc)
//                std::cout << t;
//
//            Document::Text_iterator new_first = first;
//            Document::Text_iterator new_p = p;
//            first = new_first;
//            p = new_p;
//
//            std::cout << "OUCH\n";
//            
//
//           /* for (int i = 0; i < r.size(); i++) {
//                std::cout << first.line_number()<< "\n";
//                std::cout << *first << "\n";
//
//                   std::cout << "\n";
//                get_line(first.line_number()).insert(first.get_line_iter() + i, r[i]);
//            }
//           
//            for (int i = 0; i < f.size(); i++)
//                get_line(first.line_number()).erase(first.get_line_iter() + (r.size() + i));*/
//
//
//            std::cout << first.line_number() << "\n";
//            std::cout << *first.get_line_iter() << "\n";
//
//            ++p; first = p;
//        }
//        ++p; first = p;
//    }
//}

//Document::Text_iterator Document::find_replace(const std::string& f, const std::string& r)
//{
//    Document::Text_iterator first = this->begin();
//    Document::Text_iterator last = this->end();
//
//    if (f.size() == 0) return last;    // can't find an empty string
//    char first_char = f[0];
//
//    int char_skip{ 0 };
//    size_t line_skip{ 1 };
//
//    while (true) {
//        Document::Text_iterator first = this->begin(); // we always redefine new iter to avoid invalidation
//        Document::Text_iterator last = this->end();
//
//        std::list<Line>::iterator ln = advance(first.get_list_iter(), line_skip - 1); // jump to line starting from line 1
//        first = Document::Text_iterator{ ln, ln->begin(), line_skip }; // assign first with correct coordinates
//        for (int i = 0; i < char_skip; ++i) { //std::cout << *first; 
//            ++first; } //let iter point to the first char after the previous find() result
//        
//
//        std::cout << "CURRENT ITER " << *first << "\n";
//        std::cout << "line number "<< first.line_number() << "\n";
//        std::cout << "char_skip " << char_skip << "\n";
//        std::cout << "line_skip " << line_skip << "\n";
//
//		Document::Text_iterator p = std::find(first, last, first_char); // p holds the No of line where the char is found
//        
//		//std::cout <<"SHOW YRSELF " << * p  <<"\n";
//
//        if (p == last) return p; // we reached the end after either replacing all words or finding nothing
//		std::cout << "\n";
//		std::cout << p.line_number() << "\n";
//        std::cout << first.line_number() << "\n";
//
//        if (p.line_number() != first.line_number()) { //we're on line x but the letter is found on line x+1
//            char_skip = 0;
//            line_skip = p.line_number(); //we need to get coordinates for the next line
//            std::list<Line>::iterator ln = advance(first.get_list_iter(), line_skip - first.line_number());
//            first = Document::Text_iterator{ ln, ln->begin(), line_skip }; // we must skip to the line to know the position
//
//            //std::cout << "HERE: " << * first << "\n";
//        }
//       
//        std::cout << "HERE: " << *first.get_line_iter() << " " << *p.get_line_iter()<< "\n";
//        // 
//        //let iter point to the first char after the previous find() result
//        while (first.get_line_iter() != p.get_line_iter() + 1)
//        {
//            //std::cout << char_skip; 
//            ++char_skip;
//            ++first;
//        }
//		std::cout << "SKIP: " << char_skip << "\n";
//
//        std::cout << "HERE: " << *first.get_line_iter() << " " << *p.get_line_iter() << "\n";
//
//        if (match(p, last, f)) {
//            
//            //std::cout << *temp << "\n";
//
//			//std::cout << get_line(line_skip)[0] << "\n";
//
//
//			//we redefine iters to avoid invalidation
//            for (int i = 0; i < r.size(); i++) {
//                Document::Text_iterator temp = { first.get_list_iter(),first.get_list_iter()->begin(), line_skip };
//                get_line(line_skip).insert(temp.get_line_iter() + (char_skip-1) + i, r[i]);
//            }
//
//            for (int i = 0; i < f.size(); i++) {
//                Document::Text_iterator temp = { first.get_list_iter(),first.get_list_iter()->begin(), line_skip };
//                get_line(line_skip).erase(temp.get_line_iter() + (char_skip-1) + (r.size()));
//            }
//
//			char_skip = char_skip + r.size()-1;
//			//char_skip will stop at the second letter of the replaced word; we don't skip the word 
//        }
//
//        // we dont' do anything if we didn't match because we already got the coordinates for adjustment
//    }
//
//
//}



Document::Text_iterator Document::find_replace(const std::string& f, const std::string& r)
{
    Document::Text_iterator first = this->begin();
    Document::Text_iterator last = this->end();

    if (f.size() == 0) return last;    // can't find an empty string
    char first_char = f[0];
    int char_skip{ 0 };
    size_t line_skip{ 1 };

    while (true) {
        Document::Text_iterator first = this->begin(); // we always redefine new iter to avoid invalidation
        Document::Text_iterator last = this->end();

        std::list<Line>::iterator ln = advance(first.get_list_iter(), line_skip - 1); // jump to line starting from line 1
        first = Document::Text_iterator{ ln, ln->begin(), line_skip }; // assign first with correct coordinates
        for (int i = 0; i < char_skip; ++i) { //std::cout << *first; 
            ++first;
        } //let iter point to the first char after the previous find() result

        Document::Text_iterator p = std::find(first, last, first_char); // p holds the No of line where the char is found

        if (p == last) return p; // we reached the end after either replacing all words or finding nothing
    
        if (p.line_number() != first.line_number()) { //we're on line x but the letter is found on line x+1
            char_skip = 0;
            line_skip = p.line_number(); //we need to get coordinates for the next line
            std::list<Line>::iterator ln = advance(first.get_list_iter(), line_skip - first.line_number());
            first = Document::Text_iterator{ ln, ln->begin(), line_skip }; // we must skip to the line to know the position

        }

        //let iter point to the first char after the previous find() result
        while (first.get_line_iter() != p.get_line_iter() + 1)
        {
            ++char_skip;
            ++first;
        }

        if (match(p, last, f)) {
            //we redefine iters to avoid invalidation
            for (int i = 0; i < r.size(); i++) {
                Document::Text_iterator temp = { first.get_list_iter(),first.get_list_iter()->begin(), line_skip };
                get_line(line_skip).insert(temp.get_line_iter() + (char_skip - 1) + i, r[i]);
            }

            for (int i = 0; i < f.size(); i++) {
                Document::Text_iterator temp = { first.get_list_iter(),first.get_list_iter()->begin(), line_skip };
                get_line(line_skip).erase(temp.get_line_iter() + (char_skip - 1) + (r.size()));
            }

            char_skip = char_skip + r.size() - 1;
            //char_skip adjusted to skip to the first char after the end of the replaced word
        }
        // we dont' do anything if we didn't match because we already got the coordinates for adjustment
    }
}

int Document::count_char() {

    Document::Text_iterator first = this->begin();
    Document::Text_iterator last = this->end();
    int count{ 0 };

    while (first != last) {
        ++count;
        ++first;
    }

    return count;
    
}


int Document::word_count_ws() {

    Document::Text_iterator first = this->begin();
    Document::Text_iterator last = this->end();
    int count{ 0 };

	//std::cout << *first.get_line_iter() << " " << *(first.get_list_iter()->begin()) << "\n";

    while (first != last) {
        if (first.get_line_iter() != first.get_list_iter()->begin())
        {
            std::cout << *first.get_line_iter() << " " << *(first.get_list_iter()->begin()) << "\n";
            std::cout << "LOOP" << "\n";
            Document::Text_iterator prev = --first; ++first;
            if (*first == ' ') if (!std::isspace(*prev)) { ++count; std::cout << "COUNT!\n"; }
            if (*first == '\n') if (!std::isspace(*prev)) { ++count; std::cout << "COUNT!\n"; }
        }
        ++first;
        std::cout << "ZEROLOOP" << "\n";
    }

	if (*--last != '\n') { ++count; }

    return count;

}


int Document::word_count_al() {

    Document::Text_iterator first = this->begin();
    Document::Text_iterator last = this->end();
    int count{ 0 };

    //std::cout << *first.get_line_iter() << " " << *(first.get_list_iter()->begin()) << "\n";

    while (first != last) {
        if (first.get_line_iter() != first.get_list_iter()->begin())
        {
            std::cout << *first.get_line_iter() << " " << *(first.get_list_iter()->begin()) << "\n";
            std::cout << "LOOP" << "\n";
            Document::Text_iterator prev = first - 1;
            if (*first == ' ') if (!std::isspace(*prev)) { ++count; std::cout << "COUNT!\n"; }
            if (*first == '\n') if (!std::isspace(*prev)) { ++count; std::cout << "COUNT!\n"; }
        }
        ++first;
        std::cout << "ZEROLOOP" << "\n";
    }

    if (*--last != '\n') { ++count; }

    return count;

}


Document::Text_iterator Document::Text_iterator::operator+(int x) {

	Document::Text_iterator a = *this;
    for (int i = 0; i < x; i++) {
		++a;
    }
    return a;
}

Document::Text_iterator Document::Text_iterator::operator-(int x) {

    Document::Text_iterator a = *this;
    for (int i = 0; i < x; i++) {
        --a;
    }
    return a;
}


//Document::Text_iterator operator-(const Document::Text_iterator& a, int x) {
//
//	Document::Text_iterator temp = a;
//    for (int i = 0; i < x; i++) {
//        --temp;
//    }
//    return temp;
//}


Document::Text_iterator& Document::Text_iterator::operator++()
{
    ++pos;
    if (pos == (*ln).end()) {
        //std::cout << "\nEND LINE\n";
        ++ln;            // proceed to next line
		++No;            // increment line number

		//std::cout << "\nNEW LINE:" << No << "\n";
        pos = (*ln).begin();
        //std::cout << "\nNEW LINE\n";
    }
    return *this;
}

Document::Text_iterator& Document::Text_iterator::operator--()
{
    if (pos == (*ln).begin()) {
        //std::cout << "\nEND LINE\n";
        --ln;            // decrement line
        --No;            // decrement line number
        pos = (*ln).end() - 1;
        //std::cout << "\nNEW LINE\n";
    }
    else --pos;


  //  if (pos == (*ln).begin() -1 ) {
  //      //std::cout << "\nEND LINE\n";
  //      --ln;            // decrement line
		//--No;            // decrement line number
  //      pos = (*ln).end() - 1;
  //      //std::cout << "\nNEW LINE\n";
  //  }
    return *this;
}


Document::Text_iterator& Document::Text_iterator::operator+=(const Document::Text_iterator& other)
{
    if (*this == other) return *this;
    while (*this != other)
        ++(*this);
    return *this;
}


bool Document::Text_iterator::operator==(const Document::Text_iterator& other) const
{
    return ln == other.ln && pos == other.pos;
}


struct S {
    int* x = nullptr;

    S(int xx) { x = new int(xx); }

	S& operator++();

};


S& S::operator++() {

    ++*x;

    return *this;
}


S operator+(const S& x, int xx) { 

    S temp = x;
    for (int i = 0; i < xx; i++) {
        ++temp;
    }
    return temp;

}
