int main()
try {


	
	// our graphics facilities are in Graph_lib
	Point tl{ 100,100 }; // to become top left corner of window
	Simple_window win{ tl,1200,1200,"Canvas" }; // make a simple window
	win.set_label("Ex.1");

	Point p(200, 200);
	int r = 100;
	int s = 10;

	Regular_Polygon r_p(p, r, s);



	win.attach(r_p);


	win.wait_for_button();


//////////////////////////////////////////////////////////////////////
header file:
 class Regular_Polygon : public Shape {
    public:
        Regular_Polygon(Point p, int r, int s) : _r(r), _s(s) { add(Point(p)); }

        void draw_lines() const {
            const float PiOn180 = 3.1415926535f / 180.0f;
            const float angle = (360.0f / _s) * PiOn180;

            for (int i = 0; i < _s; ++i) {
                fl_line(point(0).x + std::cos(i * angle) * _r,
                    point(0).y + std::sin(i * angle) * _r,
                    point(0).x + std::cos((i + 1) * angle) * _r,
                    point(0).y + std::sin((i + 1) * angle) * _r);
            }
        }

    private:
        int _r;
        int _s;
    };

//////////////////////////////////////////////////////////////////////
alternative: 

void Regular_polygon::set_points(Point xy, int n, int r)
{
    rad = r;
    double alpha = 2*pi/n;      // inner angle
    double phi = (pi+alpha)/2;  // current angle
    for (int i = 0; i<n; ++i) {
        set_point(i+1,Point(round(center().x+r*cos(phi+i*alpha)),
            round(center().y+r*sin(phi+i*alpha))));
    }

void Regular_polygon::draw_lines() const
{
    if (fill_color().visibility()) {
        fl_color(fill_color().as_int());
        fl_begin_complex_polygon();
        for (int i = 1; i<number_of_points(); ++i)  // point(0) is center
            fl_vertex(point(i).x,point(i).y);
        fl_end_complex_polygon();
        fl_color(color().as_int());    // reset color
    }

    if (color().visibility()) {
        for (int i = 1; i<number_of_points()-1; ++i)
            fl_line(point(i).x,point(i).y,point(i+1).x,point(i+1).y);
        fl_line(point(number_of_points()-1).x,
            point(number_of_points()-1).y,
            point(1).x,
            point(1).y);   // close polygon
    }
}

