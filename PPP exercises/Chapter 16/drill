#include "Simple_window.h" // if we want that “Next” button
#include "Graph.h"
using namespace Graph_lib;

struct Lines_window : Window {
	Lines_window(Point xy, int w, int h, const string& title);
private:
	Open_polyline lines;
	Menu color_menu;
	Menu line_menu;
	Button menu_button;
	Button line_menu_button;
	Button next_button; // add (next_x,next_y) to lines
	Button quit_button;
	In_box next_x;
	In_box next_y;
	Out_box xy_out;
	static void cb_red(Address, Address w ) { reference_to<Lines_window>(w).red_pressed(); }; // callback for red button
	static void cb_blue(Address, Address w) { reference_to<Lines_window>(w).blue_pressed(); }; // callback for blue button
	static void cb_black(Address, Address w) { reference_to<Lines_window>(w).black_pressed(); }; // callback for black button


	static void cb_dash(Address, Address w) { reference_to<Lines_window>(w).dash_pressed(); }; 
	static void cb_dashdot(Address, Address w) { reference_to<Lines_window>(w).dashdot_pressed(); }; 
	static void cb_dashdotdot(Address, Address w) { reference_to<Lines_window>(w).dashdotdot_pressed(); }; 
	static void cb_solid(Address, Address w) { reference_to<Lines_window>(w).solid_pressed(); };

	static void cb_menu(Address, Address w) { reference_to<Lines_window>(w).menu_pressed(); }
	static void cb_line_menu(Address, Address w) { reference_to<Lines_window>(w).line_menu_pressed(); }
	static void cb_next(Address, Address w) { reference_to<Lines_window>(w).next(); }
	static void cb_quit(Address, Address w) { reference_to<Lines_window>(w).quit(); }
	// the actions:
	void red_pressed() { change(Color::red); hide_menu();}
	void blue_pressed() { change(Color::blue); hide_menu();}
	void black_pressed() { change(Color::black); hide_menu();}

	void dash_pressed() { change_style(Line_style::dash); hide_menu(); }
	void dashdot_pressed() { change_style(Line_style::dashdot); hide_menu(); }
	void dashdotdot_pressed() { change_style(Line_style::dashdotdot); hide_menu(); }
	void solid_pressed() { change_style(Line_style::solid); hide_menu(); }


	void menu_pressed() { menu_button.hide(); line_menu_button.hide(); color_menu.show(); }
	void line_menu_pressed() { menu_button.hide(); line_menu_button.hide(); line_menu.show(); }
	void change(Color c) { lines.set_color(c); }
	void change_style(Line_style s) { lines.set_style(s); }
	void hide_menu() { color_menu.hide(); line_menu.hide();  menu_button.show(); line_menu_button.show();
	}


	void next();
	void quit();
};

Lines_window::Lines_window(Point xy, int w, int h, const string& title)
	:Window{ xy,w,h,title },
	next_button{ Point{x_max() - 150,0}, 70, 20, "Next point",
	[](Address, Address pw) {reference_to<Lines_window>(pw).next(); } },


	quit_button{Point{x_max() - 70,0}, 70, 20, "Quit",
	[](Address, Address pw) {reference_to<Lines_window>(pw).quit(); } },
	next_x{Point{x_max()- 310,0}, 50, 20, "next x:"},
	next_y{Point{x_max()- 210,0}, 50, 20, "next y:"},
	xy_out{Point{100,0}, 100, 20, "current (x,y):"},
	color_menu{ Point{x_max() - 70,40},70,20,Menu::vertical,"color" },
	line_menu{ Point{x_max() - 70,40},90,20,Menu::vertical,"line style" },
	menu_button{Point{ x_max() - 80,30 }, 80, 20, "color menu", cb_menu },
	line_menu_button {Point{ x_max() - 80,50 }, 80, 20, "line menu", cb_line_menu}

   {
	attach(next_button);
	attach(quit_button);
	attach(next_x);
	attach(next_y);
	attach(xy_out);
	xy_out.put("no point");
	attach(lines);
	color_menu.attach(new Button{ Point{0,0},0,0,"red",cb_red });
	color_menu.attach(new Button{ Point{0,0},0,0,"blue",cb_blue });
	color_menu.attach(new Button{ Point{0,0},0,0,"black",cb_black });
	attach(color_menu);
	color_menu.hide();
	line_menu.attach(new Button{ Point{0,0},0,0,"dash",cb_dash });
	line_menu.attach(new Button{ Point{0,0},0,0,"dashdot",cb_dashdot });
	line_menu.attach(new Button{ Point{0,0},0,0,"dashdotdot",cb_dashdotdot });
	line_menu.attach(new Button{ Point{0,0},0,0,"solid",cb_solid });
	attach(line_menu);
	line_menu.hide();
	attach(menu_button);
	attach(line_menu_button);
   }


void Lines_window::quit()
{
	hide(); // curious FLTK idiom to delete window
}

void Lines_window::next()
{
	int x = next_x.get_int();
	int y = next_y.get_int();

	lines.add(Point{ x,y });

	// update current position readout:
	ostringstream ss;
	ss << '(' << x << ',' << y << ')';
	xy_out.put(ss.str());
	redraw();
}



int main()
try {
	
	Lines_window win{ Point{100,100},600,400,"lines" };
	return gui_main();


	return 0;

}
catch (exception& e) {
	cerr << e.what() << '\n';
}
catch (...) {
	cerr << "something bad happened\n";
}
