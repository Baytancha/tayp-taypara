The version from §9.4.1
struct Date {
    int y; // year
    int m; // month in year
    int d; // day of month
};


void init_day(Date& dd, int y, int m, int d)
{
    dd.y = y;
    dd.m = m;
    dd.d = d;
}


void add_day(Date& dd, int n)
{
    int x = dd.d;
    x += n;
    dd.d = x;
}


void f()
{

    Date today;
    
    init_day(today, 1978, 06, 25); // oops! (no day 2005 in year 12)

    cout << today.d << ' '<< today.m << ' ' << today.y << '\n';
    Date tomorrow = today;
    add_day(tomorrow, 1);
    cout << tomorrow.d << ' ' << tomorrow.m << ' ' << tomorrow.y << '\n';
}


int main()
try {
   
    f();

    keep_window_open();    // cope with Windows console mode
    return 0;
}
catch (exception& e) {
    cerr << e.what() << endl;
    keep_window_open("~~");
    return 1;
}
catch (...) {
    cerr << "exception \n";
    keep_window_open("~~");
    return 2;
}

Ver.2:
enum class Month {
    Jan = 1, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec
};

Month operator++(Month& m) // prefix increment operator
{
    m = (m == Month::Dec) ? Month::Jan : Month(int(m) + 1); // “wrap around”
    return m;
}

vector<string> month_tbl{ "zero", "Jan", "Feb", "Mar", "Apr", "May",
"Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

ostream& operator<<(ostream& os, Month m)
{
    return os << month_tbl[int(m)];
}


struct Date {
    Month m; // month in year
    int d; // day of month
    string comma{ "," };
    int y;
};


void init_day(Date& dd, Month m, int d, int y)
{
    dd.y = y;
    dd.m = m;
    dd.d = d;
}


void add_day(Date& dd, int n)
{
    int x = dd.d;
    x += n;
    dd.d = x;
}

void f()
{

    Date today;

    init_day(today, Month::Jul, 25, 1978); // oops! (no day 2005 in year 12)

    cout << today.d << ' ' << today.m << ' ' << today.y << '\n';
    Date tomorrow = today;
    add_day(tomorrow, 1);
    cout << tomorrow.d << ' ' << tomorrow.m << ' ' << tomorrow.y << '\n';
}
int main()
try {

    f();

    keep_window_open();    // cope with Windows console mode
    return 0;
}
catch (exception& e) {
    cerr << e.what() << endl;
    keep_window_open("~~");
    return 1;
}
catch (...) {
    cerr << "exception \n";
    keep_window_open("~~");
    return 2;
}


The version from §9.4.2
#include "std_lib_facilities.h"

struct Date {
    int y; // year
    int m; // month in year
    int d; // day of month
    Date(int y, int m, int d);
    void add_day(int n); // introducing member functions
};

Date::Date(int y, int m, int d) : y(y), m(m), d(d) {}

void Date::add_day(int n) {
    int x = d;
    x += n;
    d = x;
}

void f()
{
    Date today{1978, 06, 25};

    cout << today.d << ' '<< today.m << ' ' << today.y << '\n';
    Date tomorrow = today;
   tomorrow.add_day(1);
    cout << tomorrow.d << ' ' << tomorrow.m << ' ' << tomorrow.y << '\n';
}


int main()
try {
   
    f();

    keep_window_open();    // cope with Windows console mode
    return 0;
}
catch (exception& e) {
    cerr << e.what() << endl;
    keep_window_open("~~");
    return 1;
}
catch (...) {
    cerr << "exception \n";
    keep_window_open("~~");
    return 2;
}




The version from §9.4.3
#include "std_lib_facilities.h"

class Date {
    int y, m, d;                      // year, month, day
public:
    Date(int y, int m, int d);        // check for valid date and initialize
    void add_day(int n);              // increase the Date by n days
    int month() { return m; }
    int day() { return d; }
    int year() { return y; }
};

//------------------------------------------------------------------------------

Date::Date(int y, int m, int d) : y(y), m(m), d(d) {}

void Date::add_day(int n) {
    int x = d;
    x += n;
    d = x;
}

void f()
{
    Date today{ 1978, 06, 25 };

    cout << today.day() << ' ' << today.month() << ' ' << today.year() << '\n';
    Date tomorrow = today;
   
    tomorrow.add_day(1);
    cout << tomorrow.day() << ' ' << tomorrow.month() << ' ' << tomorrow.year() << '\n';
}
    


int main()
try {

    f();

    keep_window_open();    // cope with Windows console mode
    return 0;
}
catch (exception& e) {
    cerr << e.what() << endl;
    keep_window_open("~~");
    return 1;
}
catch (...) {
    cerr << "exception \n";
    keep_window_open("~~");
    return 2;
}


















