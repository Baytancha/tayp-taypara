struct Distribution {
	int year, young, middle, old;
};
istream& operator>>(istream& is, Distribution& d)
// assume format: ( year : young middle old )
{
	char ch1 = 0;
	char ch2 = 0;
	char ch3 = 0;
	Distribution dd;
	if (is >> ch1 >> dd.year
		>> ch2 >> dd.young >> dd.middle >> dd.old
		>> ch3) {
		if (ch1 != '(' || ch2 != ':' || ch3 != ')') {
			is.clear(ios_base::failbit);
			return is;
		}
	}
	else
		return is;
	d = dd;
	return is;
}


class Scale { // data value to coordinate conversion
	int cbase; // coordinate base
	int vbase; // base of values
	double scale;
public:
	Scale(int b, int vb, double s) :cbase{ b }, vbase{ vb }, scale{ s } { }
	int operator()(int v) const { return cbase + (v - vbase) * scale; } // you put a number in the number range 
//and it locates exact point on the line which corresponds to the number's numerical placement; the range must fit into the line; 
// ex: line divided by 100 notches, and we want to draw at point 57;
};



const int xoffset = 100; // distance from left-hand side of window to y axis
const int yoffset = 60; // distance from bottom of window to x axis

const int xspace = 40; // space beyond axis
const int yspace = 40;

const int xmax = 600;
const int ymax = 400;


const int xlength = xmax - xoffset - xspace; // length of axes
const int ylength = ymax - yoffset - yspace;

const int base_year = 1960;
const int end_year = 2040;
const double xscale = double(xlength) / (end_year - base_year);
const double yscale = double(ylength) / 100;




int main()
try {
	// our graphics facilities are in Graph_lib
	Point tl{ 100,100 }; // to become top left corner of window
	Simple_window win{ tl,1000,900,"Canvas" }; // make a simple window
	win.set_label("Ex.1");


	Scale xs{ xoffset,base_year,xscale };  // x coordinate moves rightwise 
//for xoffset, and then moves again for (YEAR - BASE.YEAR)/number of years; 
//ex. x+ 100 + (2000-1960)/2.5 where 2.5 is length of x / number of years;
	Scale ys{ ymax - yoffset,0,-yscale };

	Axis x{ Axis::x, Point{xoffset,ymax - yoffset}, xlength,
 (end_year - base_year) / 10,
 "year 1960 1970 1980 1990 "
 "2000 2010 2020 2030 2040" };
	x.set_color(Color::black);
	x.label.move(-100, 0);
	Axis y{ Axis::y, Point{xoffset,ymax - yoffset}, ylength, 10,"% of population" };
	y.set_color(Color::black);
	Line current_year{ Point{xs(2008),ys(0)},Point{xs(2008),ys(100)} };
	current_year.set_color(Color::black);
	current_year.set_style(Line_style::dash);


	string file_name = "japanese-age-data.txt";
	ifstream ifs{ file_name };
	if (!ifs) error("can't open ", file_name);

	Open_polyline children;
	Open_polyline adults;
	Open_polyline aged;
	for (Distribution d; ifs >> d; ) {
		if (d.year < base_year || end_year < d.year) error("year out of range");
		if (d.young + d.middle + d.old != 100)
			error("percentages don't add up");
		const int x = xs(d.year);
		children.add(Point{ x,ys(d.young) });
		adults.add(Point{ x,ys(d.middle) });
		aged.add(Point{ x,ys(d.old) });
	}

	Text children_label{ Point{20,children.point(0).y},"age 0-14" };
	children.set_color(Color::red);
	children_label.set_color(Color::red);
	Text adults_label{ Point{20,adults.point(0).y},"age 15-64" };
	adults.set_color(Color::blue);
	adults_label.set_color(Color::blue);
	Text aged_label{ Point{20,aged.point(0).y},"age 65+" };
	aged.set_color(Color::dark_green);
	aged_label.set_color(Color::dark_green);

	win.attach(children);
	win.attach(adults);
	win.attach(aged);
	win.attach(children_label);
	win.attach(adults_label);
	win.attach(aged_label);
	win.attach(x);
	win.attach(y);
	win.attach(current_year);
	//gui_main();

	win.wait_for_button();



	Ssmiley_hat ss1(Point(300, 300), 50);
	Ffrowny_hat ss2(Point(300, 500), 50);

	Group gr; gr.add_shape(ss1); gr.add_shape(ss2);
	gr.set_color(Color::dark_yellow);
	win.attach(gr);




	win.wait_for_button();





	Ssmiley_hat ss4(Point(500, 400), 150);
	ss4.hat_set_color(Color::dark_green);
	win.attach(ss4);
	ss4.set_color(Color::dark_red);
	ss4.set_fill_color(Color::green);
	ss4.set_eye_color(Color::blue);
	ss4.set_mouth_color(Color::dark_cyan);
	ss4.set_style(Line_style(Line_style::solid, 4));
	ss4.hat_set_style(Line_style(Line_style::solid, 4));

	win.wait_for_button();

	ss4.move(100, 100);
	win.wait_for_button();

	//Frowny f1(Point(150, 150), 100);
	//win.attach(f1);
	////win.wait_for_button();

	//Hat_smiley hs1(Point(900, 400), 175);
	//win.attach(hs1);
	////win.wait_for_button();
	//hs1.set_fill_color(Color::yellow);
	//hs1.set_color(Color::dark_blue);
	//hs1.set_style(Line_style(Line_style::solid, 4));
	////win.wait_for_button();

	//Hat_frowny hf1(Point(600, 100), 75);
	//win.attach(hf1);
	////win.wait_for_button();
	//hf1.move(50, 50);
	//hf1.set_style(Line_style(Line_style::solid, 4));
	//hf1.set_fill_color(Color::yellow);
	//win.wait_for_button();

	Graph_lib::Polygon poly; // a polygon; a Polygon is a kind of Shape
	poly.add(Point{ 200,50 }); // three points make a triangle
	poly.add(Point{ 200,80 });
	poly.add(Point{ 300,80 });
	poly.add(Point{ 300,50 });
	poly.set_color(Color::red);
	poly.set_style(Line_style::dash);
	win.attach(poly);

	Graph_lib::Rectangle r{ Point{200,300}, 100, 50 }; // top left corner, width, height
	r.set_color(Color::blue);
	win.attach(r);




	Text t{ Point{150,150}, "Hello, graphical world!" };
	t.set_font(Font::times_bold);
	t.set_font_size(20);
	t.set_color(Color::black);
	win.attach(t);

	win.wait_for_button();




	/*Fl_Window window(200, 200, "Window title");
	Fl_Box box(0, 0, 200, 200, "Hey, I mean, Hello, World!");
	window.show();
	return Fl::run();*/

	return 0;

}
catch (exception& e) {
	cerr << e.what() << '\n';
}
catch (...) {
	cerr << "something bad happened\n";
}
