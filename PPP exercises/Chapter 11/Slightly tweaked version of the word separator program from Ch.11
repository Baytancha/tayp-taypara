//A version of the >> function which takes a vector instead of a string and makes it unnecessary to create a ranged-for loop in the main function

Punct_stream& Punct_stream::operator>>(Vector <string>& v)
{
    string word;
    bool get_out{ false };

    while (!get_out) {

        while (!(buffer >> word)) { // try to read from buffer
            if (buffer.bad() || !source.good()) { get_out = true;   return *this; }
            buffer.clear(); // reading from empty buffer causes malfunction unless cleared
            string line;
            getline(source, line); // get a line from source
            for (char& ch : line)
                if (is_whitespace(ch))
                    ch = ' '; // to space
                else if (!sensitive)
                    ch = tolower(ch); // to lower case
            buffer.str(line); // put string into stream

        }
        if (get_out) return *this;
        v.push_back(word);
    }





int main()
try {


    Punct_stream ps{ cin };
    ps.whitespace(";:,.?!()\"{}<>/&$@#%^*|~"); // note \“ means ” in string
    ps.case_sensitive(false);
    cout << "please enter words\n";
    vector<string> vs;

    ps >> vs;
    sort(vs.begin(), vs.end()); // sort in lexicographical order
    for (int i = 0; i < vs.size(); ++i) // write dictionary
        if (i == 0 || vs[i] != vs[i-1]) cout << vs[i] << '\n';


}
catch (exception& e) {
    cerr << e.what();
}
catch (...) {
    cerr << "unknown exception";
}




















