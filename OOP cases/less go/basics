package main

import (
	"fmt"
	"math"
	"math/cmplx"
	"runtime"
	"time"
)

var ( //compact declaration for vars
	ToBe   bool       = false
	MaxInt uint64     = 1<<64 - 1
	z      complex128 = cmplx.Sqrt(-5 + 12i)
)

// comp decl for consts
const (
	// Create a huge number by shifting a 1 bit left 100 places.
	// In other words, the binary number that is 1 followed by 100 zeroes.
	Big = 1 << 100
	// Shift it right again 99 places, so we end up with 1<<1, or 2.
	Small = Big >> 99
)

const Big1 int = 100 //accepted only by arg int functions

func swap(x, y string) (string, string, string) {
	z := "nil"
	return y, x, z
}

func split(sum int) (x, y int) {
	x = sum * 4 / 9
	y = sum - x
	return
}

func split2(sum int) (x, y int) {
	x = sum * 4 / 9
	y = sum - x
	z := sum
	y += z
	return
}

const Pi = 3.14

var c, python, java bool = true, false, true

func needInt(x int) int { return x*10 + 1 }
func needFloat(x float64) float64 {
	return x * 0.1
}

func sqrt(x float64) string { //IF STATEMETNTS
	if x < 0 {
		return sqrt(-x) + "i" //concatenaion bc return type is string
	}
	return fmt.Sprint(math.Sqrt(x)) //returns an arg to fmt.Println
}

func pow(x, n, lim float64) float64 {
	if v := math.Pow(x, n); v < lim { // if (var v is less than lim)
		return v
	}

	//v = 100;
	return lim
}

func pow1(x, n, lim float64) float64 { //C-style control flow
	v := math.Pow(x, n)
	if v < lim { // if (var v is less than lim)
		return v
	}
	v = 100
	return lim
}

func Sqrt(x float64) float64 {
	var z float64 = 1.0
	z1 := z + 1
	for z != z1 {
		z1 = z
		z -= (z*z - x) / (2 * z)
		fmt.Println(z)
	}
	return z
}

func main() {

	fmt.Println("counting")

	for i := 0; i < 10; i++ {
		defer fmt.Println(i) //numbers are printed in reverse order
	}

	fmt.Println("done")

	defer fmt.Println("world") //will be executed at the end of the program

	fmt.Println("hello")

	fmt.Println(Sqrt(16))

	fmt.Println(
		pow(3, 2, 10),
		pow(3, 3, 20),
	)

	fmt.Println(needInt(Small))   //untyped constant used as int
	fmt.Println(needFloat(Small)) //untyped const used as flot
	fmt.Println(needFloat(Big))
	//fmt.Println(needInt(Big)) //numeris overlfow: int too small
	//fmt.Println(needFloat(Big1)) // type mismatch

	a, b, c := swap("hello", "world")
	fmt.Println(a, b, c)

	fmt.Println(split(60)) //func return types are converted for proper outputting

	fmt.Println(split2(60)) //not Printf

	var i int //zero initialized
	var f float64
	var bb bool
	var s string
	fmt.Printf("%v %v %v %q\n", i, f, bb, s) //this func allows specifying formatting options

	var x, y int = 3, 4
	var ff float64 = math.Sqrt(float64(x*x + y*y)) //expl conversion from int to float64
	z := uint(ff)                                  //conversion from float64 to unint and assignment to newly declared z var
	fmt.Println(x, y, z)

	v := 0.867 + 0.5i // change me!
	fmt.Printf("v is of type %T\n", v)

	const Truth = true
	fmt.Println("Go rules?", Truth)

	sum := 0
	for i := 0; i < 10; i++ {
		sum += i
	}

	fmt.Println(sum)

	sum1 := 1
	for sum1 < 1000 { //while (sum1<1000)
		sum1 += sum1
	}
	fmt.Println(sum1)

	fmt.Println(sqrt(2), sqrt(-4))

	fmt.Print("Go runs on ")
	switch os := runtime.GOOS; os { //pivoted value doesnt have to be an integer
	case "darwin":
		fmt.Println("OS X.")
	case "linux":
		fmt.Println("Linux.")
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf("%s.\n", os)
	}

	t := time.Now()
	switch {
	case t.Hour() < 12:
		fmt.Println("Good morning!")
	case t.Hour() < 17:
		fmt.Println("Good afternoon.")
	default:
		fmt.Println("Good evening.")
	}

	fmt.Println("When's Saturday?")
	today := time.Now().Weekday()
	switch time.Saturday {
	case today + 0: //unlike in C++ a condition may be a non-const expression
		fmt.Println("Today.") //if boolean expression is false we move to the next case
	case today + 1:
		fmt.Println("Tomorrow.")
	case today + 2:
		fmt.Println("In two days.")
	default:
		fmt.Println("Too far away.")
	}

}
