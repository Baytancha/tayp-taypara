In most quarters, class inheritance for the sole purpose of code reuse has fallen out of favor.[citation needed] 
The primary concern is that implementation inheritance does not provide any assurance of polymorphic substitutabilityâ€”
an instance of the reusing class cannot necessarily be substituted for an instance of the inherited class. 
An alternative technique, explicit delegation, requires more programming effort, but avoids the substitutability 
issue.[citation needed] In C++ private inheritance can be used as a form of implementation inheritance without substitutability. 
Whereas public inheritance represents an "is-a" relationship and delegation represents a "has-a" relationship, private 
(and protected) inheritance can be thought of as an "is implemented in terms of" relationship.[16]



In programming languages that do not support inheritance as a subtyping mechanism, the relationship between a base class and a derived 
class is only a relationship between implementations (a mechanism for code reuse), as compared to a relationship between types. 
Inheritance, even in programming languages that support inheritance as a subtyping mechanism, does not necessarily entail behavioral subtyping. 
It is entirely possible to derive a class whose object will behave incorrectly when used in a context where the parent class is expected; 
see the Liskov substitution principle.[18] (Compare connotation/denotation.) In some OOP languages, the notions of code reuse and subtyping 
coincide because the only way to declare a subtype is to define a new class that inherits the implementation of another.







class AA {
public:
	AA(int x) { }
};

class AB : private AA {
public:
	AB(int x) : AA{ x } { }
};

void func(AA& ob) {
}


int main()
try {
	AA obj(3);

	AB objj(4);


	AA* x = &objj; // ERROR: private ctor prevents interface inheritance

	func(objj); // same
