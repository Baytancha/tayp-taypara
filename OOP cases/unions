union S
{
    std::int32_t n;     // occupies 4 bytes
    std::uint16_t s[2]; // occupies 4 bytes
    std::uint8_t c;     // occupies 1 byte
};                      // the whole union occupies 4 bytes
 
int main()
{
    S s = {0x12345678}; // initializes the first member, s.n is now the active member
    // at this point, reading from s.s or s.c is undefined behavior
    std::cout << std::hex << "s.n = " << s.n << '\n';
    s.s[0] = 0x0011; // s.s is now the active member
    // at this point, reading from n or c is UB but most compilers define it
    std::cout << "s.c is now " << +s.c << '\n' // 11 or 00, depending on platform
              << "s.n is now " << s.n << '\n'; // 12340011 or 00115678
}

https://stackoverflow.com/questions/34581372/unions-in-c11-default-constructor-seems-to-be-deleted


struct non_trivially {
    non_trivially() {};
};

struct non_trivially2 {
    non_trivially2() {};
};

union U {
    bool dummy{};
    non_trivially value;
    non_trivially2 value2;
};

union U2 {
    int x = 10;
    double y;
    non_trivially value;
    non_trivially2 value2;
};


int main()
try {

    U2 x;

    U u;
    non_trivially n;
    u.dummy = true;
    u.value = n;
